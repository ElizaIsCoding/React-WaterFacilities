{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handler = exports.HandlerBuilder = void 0;\n\nvar apps_1 = require(\"./apps\");\n\nvar analytics = require(\"./providers/analytics\");\n\nvar auth = require(\"./providers/auth\");\n\nvar database = require(\"./providers/database\");\n\nvar firestore = require(\"./providers/firestore\");\n\nvar https = require(\"./providers/https\");\n\nvar pubsub = require(\"./providers/pubsub\");\n\nvar remoteConfig = require(\"./providers/remoteConfig\");\n\nvar storage = require(\"./providers/storage\");\n\nvar testLab = require(\"./providers/testLab\");\n/**\n * The `HandlerBuilder` class facilitates the writing of functions by developers\n * building Firebase Extensions as well as developers who want to use the gcloud CLI or\n * Google Cloud Console to deploy their functions.\n *\n * **Do not use `HandlerBuilder` when writing normal functions for deployment via\n * the Firebase CLI.** For normal purposes, use\n * [`FunctionBuilder`](/docs/reference/functions/function_builder_.functionbuilder).\n */\n\n\nvar HandlerBuilder = /*#__PURE__*/function () {\n  function HandlerBuilder() {\n    _classCallCheck(this, HandlerBuilder);\n  }\n  /**\n   * Create a handler for HTTPS events.\n  \n   * `onRequest` handles an HTTPS request and has the same signature as an Express app.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.https.onRequest((req, res) => { ... })\n   * ```\n   *\n   * `onCall` declares a callable function for clients to call using a Firebase SDK.\n   *\n   * @example\n   * ```javascript\n   * exports.myFunction = functions.handler.https.onCall((data, context) => { ... })\n   * ```\n   */\n\n\n  _createClass(HandlerBuilder, [{\n    key: \"https\",\n    get: function get() {\n      return {\n        onRequest: function onRequest(handler) {\n          var func = https._onRequestWithOptions(handler, {});\n\n          func.__trigger = {};\n          return func;\n        },\n        onCall: function onCall(handler) {\n          var func = https._onCallWithOptions(handler, {});\n\n          func.__trigger = {};\n          return func;\n        }\n      };\n    }\n    /**\n     * Create a handler for Firebase Realtime Database events.\n     *\n     * `ref.onCreate` handles the creation of new data.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.database.ref.onCreate((snap, context) => { ... })\n     * ```\n     *\n     * `ref.onUpdate` handles updates to existing data.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.database.ref.onUpdate((change, context) => { ... })\n     * ```\n    \n     * `ref.onDelete` handles the deletion of existing data.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.database.ref.onDelete((snap, context) => { ... })\n     * ```\n        * `ref.onWrite` handles the creation, update, or deletion of data.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.database.ref.onWrite((change, context) => { ... })\n     * ```\n     */\n\n  }, {\n    key: \"database\",\n    get: function get() {\n      return {\n        /** @hidden */\n        get instance() {\n          return {\n            get ref() {\n              return new database.RefBuilder(apps_1.apps(), function () {\n                return null;\n              }, {});\n            }\n\n          };\n        },\n\n        get ref() {\n          return new database.RefBuilder(apps_1.apps(), function () {\n            return null;\n          }, {});\n        }\n\n      };\n    }\n    /**\n     * Create a handler for Cloud Firestore events.\n     *\n     * `document.onCreate` handles the creation of new documents.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.firestore.document.onCreate((snap, context) => { ... })\n     * ```\n     \n     * `document.onUpdate` handles updates to existing documents.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.firestore.document.onUpdate((change, context) => { ... })\n     * ```\n     \n     * `document.onDelete` handles the deletion of existing documents.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.firestore.document.onDelete((snap, context) =>\n     * { ... })\n     * ```\n     \n     * `document.onWrite` handles the creation, update, or deletion of documents.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.firestore.document.onWrite((change, context) =>\n     * { ... })\n     * ```\n     */\n\n  }, {\n    key: \"firestore\",\n    get: function get() {\n      return {\n        get document() {\n          return new firestore.DocumentBuilder(function () {\n            return null;\n          }, {});\n        },\n\n        /** @hidden */\n        get namespace() {\n          return new firestore.DocumentBuilder(function () {\n            return null;\n          }, {});\n        },\n\n        /** @hidden */\n        get database() {\n          return new firestore.DocumentBuilder(function () {\n            return null;\n          }, {});\n        }\n\n      };\n    }\n    /**\n     * Create a handler for Firebase Remote Config events.\n        * `remoteConfig.onUpdate` handles events that update a Remote Config template.\n         * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.remoteConfig.onUpdate() => { ... })\n     * ```\n     */\n\n  }, {\n    key: \"remoteConfig\",\n    get: function get() {\n      return {\n        onUpdate: function onUpdate(handler) {\n          return new remoteConfig.UpdateBuilder(function () {\n            return null;\n          }, {}).onUpdate(handler);\n        }\n      };\n    }\n    /**\n     * Create a handler for Google Analytics events.\n     \n     * `event.onLog` handles the logging of Analytics conversion events.\n         * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.analytics.event.onLog((event) => { ... })\n     * ```\n     */\n\n  }, {\n    key: \"analytics\",\n    get: function get() {\n      return {\n        get event() {\n          return new analytics.AnalyticsEventBuilder(function () {\n            return null;\n          }, {});\n        }\n\n      };\n    }\n    /**\n     * Create a handler for Cloud Storage for Firebase events.\n     *\n     * `object.onArchive` handles the archiving of Storage objects.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.storage.object.onArchive((object) => { ... })\n     * ```\n     \n     * `object.onDelete` handles the deletion of Storage objects.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.storage.object.onDelete((object) => { ... })\n     * ```\n     \n     * `object.onFinalize` handles the creation of Storage objects.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.storage.object.onFinalize((object) =>\n     * { ... })\n     * ```\n     \n     * `object.onMetadataUpdate` handles changes to the metadata of existing Storage objects.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.storage.object.onMetadataUpdate((object) =>\n     * { ... })\n     * ```\n     */\n\n  }, {\n    key: \"storage\",\n    get: function get() {\n      return {\n        get bucket() {\n          return new storage.BucketBuilder(function () {\n            return null;\n          }, {}).object();\n        },\n\n        get object() {\n          return new storage.ObjectBuilder(function () {\n            return null;\n          }, {});\n        }\n\n      };\n    }\n    /**\n     * Create a handler for Cloud Pub/Sub events.\n     *\n     * `topic.onPublish` handles messages published to a Pub/Sub topic from SDKs, Cloud Console, or gcloud CLI.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.pubsub.topic.onPublish((message) => { ... })\n     * ```\n     \n     * `schedule.onPublish` handles messages published to a Pub/Sub topic on a schedule.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.pubsub.schedule.onPublish((message) => { ... })\n     * ```\n     */\n\n  }, {\n    key: \"pubsub\",\n    get: function get() {\n      return {\n        get topic() {\n          return new pubsub.TopicBuilder(function () {\n            return null;\n          }, {});\n        },\n\n        get schedule() {\n          return new pubsub.ScheduleBuilder(function () {\n            return null;\n          }, {});\n        }\n\n      };\n    }\n    /**\n     * Create a handler for Firebase Authentication events.\n     *\n     * `user.onCreate` handles the creation of users.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.auth.user.onCreate((user) => { ... })\n     * ```\n     \n     * `user.onDelete` handles the deletion of users.\n     *\n     * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.auth.user.onDelete((user => { ... })\n     * ```\n     \n     */\n\n  }, {\n    key: \"auth\",\n    get: function get() {\n      return {\n        get user() {\n          return new auth.UserBuilder(function () {\n            return null;\n          }, {});\n        }\n\n      };\n    }\n    /**\n     * Create a handler for Firebase Test Lab events.\n        * `testMatrix.onComplete` handles the completion of a test matrix.\n         * @example\n     * ```javascript\n     * exports.myFunction = functions.handler.testLab.testMatrix.onComplete((testMatrix) => { ... })\n     * ```\n     */\n\n  }, {\n    key: \"testLab\",\n    get: function get() {\n      return {\n        get testMatrix() {\n          return new testLab.TestMatrixBuilder(function () {\n            return null;\n          }, {});\n        }\n\n      };\n    }\n  }]);\n\n  return HandlerBuilder;\n}();\n\nexports.HandlerBuilder = HandlerBuilder;\nexports.handler = new HandlerBuilder();","map":null,"metadata":{},"sourceType":"script"}