{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExportBundleInfo = exports.UserPropertyValue = exports.UserDimensions = exports.AnalyticsEvent = exports.AnalyticsEventBuilder = exports._eventWithOptions = exports.event = exports.service = exports.provider = void 0;\n\nvar _ = require(\"lodash\");\n\nvar cloud_functions_1 = require(\"../cloud-functions\");\n/** @hidden */\n\n\nexports.provider = 'google.analytics';\n/** @hidden */\n\nexports.service = 'app-measurement.com';\n/**\n * Registers a function to handle analytics events.\n *\n * @param analyticsEventType Name of the analytics event type to which\n *   this Cloud Function is scoped.\n *\n * @return Analytics event builder interface.\n */\n\nfunction event(analyticsEventType) {\n  return _eventWithOptions(analyticsEventType, {});\n}\n\nexports.event = event;\n/** @hidden */\n\nfunction _eventWithOptions(analyticsEventType, options) {\n  return new AnalyticsEventBuilder(function () {\n    if (!process.env.GCLOUD_PROJECT) {\n      throw new Error('process.env.GCLOUD_PROJECT is not set.');\n    }\n\n    return 'projects/' + process.env.GCLOUD_PROJECT + '/events/' + analyticsEventType;\n  }, options);\n}\n\nexports._eventWithOptions = _eventWithOptions;\n/**\n * The Firebase Analytics event builder interface.\n *\n * Access via [`functions.analytics.event()`](functions.analytics#.event).\n */\n\nvar AnalyticsEventBuilder = /*#__PURE__*/function () {\n  /** @hidden */\n  function AnalyticsEventBuilder(triggerResource, options) {\n    _classCallCheck(this, AnalyticsEventBuilder);\n\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n  /**\n   * Event handler that fires every time a Firebase Analytics event occurs.\n   *\n   * @param handler Event handler that fires every time a Firebase Analytics event\n   *   occurs.\n   *\n   * @return A function that you can export and deploy.\n   */\n\n\n  _createClass(AnalyticsEventBuilder, [{\n    key: \"onLog\",\n    value: function onLog(handler) {\n      var dataConstructor = function dataConstructor(raw) {\n        return new AnalyticsEvent(raw.data);\n      };\n\n      return cloud_functions_1.makeCloudFunction({\n        handler: handler,\n        provider: exports.provider,\n        eventType: 'event.log',\n        service: exports.service,\n        legacyEventType: \"providers/google.firebase.analytics/eventTypes/event.log\",\n        triggerResource: this.triggerResource,\n        dataConstructor: dataConstructor,\n        options: this.options\n      });\n    }\n  }]);\n\n  return AnalyticsEventBuilder;\n}();\n\nexports.AnalyticsEventBuilder = AnalyticsEventBuilder;\n/** Interface representing a Firebase Analytics event that was logged for a specific user. */\n\nvar AnalyticsEvent =\n/** @hidden */\nfunction AnalyticsEvent(wireFormat) {\n  _classCallCheck(this, AnalyticsEvent);\n\n  this.params = {}; // In case of absent field, show empty (not absent) map.\n\n  if (wireFormat.eventDim && wireFormat.eventDim.length > 0) {\n    // If there's an eventDim, there'll always be exactly one.\n    var eventDim = wireFormat.eventDim[0];\n    copyField(eventDim, this, 'name');\n    copyField(eventDim, this, 'params', function (p) {\n      return _.mapValues(p, unwrapValue);\n    });\n    copyFieldTo(eventDim, this, 'valueInUsd', 'valueInUSD');\n    copyFieldTo(eventDim, this, 'date', 'reportingDate');\n    copyTimestampToString(eventDim, this, 'timestampMicros', 'logTime');\n    copyTimestampToString(eventDim, this, 'previousTimestampMicros', 'previousLogTime');\n  }\n\n  copyFieldTo(wireFormat, this, 'userDim', 'user', function (dim) {\n    return new UserDimensions(dim);\n  });\n};\n\nexports.AnalyticsEvent = AnalyticsEvent;\n/**\n * Interface representing the user who triggered the events.\n */\n\nvar UserDimensions =\n/** @hidden */\nfunction UserDimensions(wireFormat) {\n  _classCallCheck(this, UserDimensions);\n\n  // These are interfaces or primitives, no transformation needed.\n  copyFields(wireFormat, this, ['userId', 'deviceInfo', 'geoInfo', 'appInfo']); // The following fields do need transformations of some sort.\n\n  copyTimestampToString(wireFormat, this, 'firstOpenTimestampMicros', 'firstOpenTime');\n  this.userProperties = {}; // With no entries in the wire format, present an empty (as opposed to absent) map.\n\n  copyField(wireFormat, this, 'userProperties', function (r) {\n    return _.mapValues(r, function (p) {\n      return new UserPropertyValue(p);\n    });\n  });\n  copyField(wireFormat, this, 'bundleInfo', function (r) {\n    return new ExportBundleInfo(r);\n  }); // BUG(36000368) Remove when no longer necessary\n\n  /* tslint:disable:no-string-literal */\n\n  if (!this.userId && this.userProperties['user_id']) {\n    this.userId = this.userProperties['user_id'].value;\n  }\n  /* tslint:enable:no-string-literal */\n\n};\n\nexports.UserDimensions = UserDimensions;\n/** Predefined or custom properties stored on the client side. */\n\nvar UserPropertyValue =\n/** @hidden */\nfunction UserPropertyValue(wireFormat) {\n  _classCallCheck(this, UserPropertyValue);\n\n  copyField(wireFormat, this, 'value', unwrapValueAsString);\n  copyTimestampToString(wireFormat, this, 'setTimestampUsec', 'setTime');\n};\n\nexports.UserPropertyValue = UserPropertyValue;\n/** Interface representing the bundle these events were uploaded to. */\n\nvar ExportBundleInfo =\n/** @hidden */\nfunction ExportBundleInfo(wireFormat) {\n  _classCallCheck(this, ExportBundleInfo);\n\n  copyField(wireFormat, this, 'bundleSequenceId');\n  copyTimestampToMillis(wireFormat, this, 'serverTimestampOffsetMicros', 'serverTimestampOffset');\n};\n\nexports.ExportBundleInfo = ExportBundleInfo;\n/** @hidden */\n\nfunction copyFieldTo(from, to, fromField, toField) {\n  var transform = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _.identity;\n\n  if (from[fromField] !== undefined) {\n    to[toField] = transform(from[fromField]);\n  }\n}\n/** @hidden */\n\n\nfunction copyField(from, to, field) {\n  var transform = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _.identity;\n  copyFieldTo(from, to, field, field, transform);\n}\n/** @hidden */\n\n\nfunction copyFields(from, to, fields) {\n  var _iterator = _createForOfIteratorHelper(fields),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var field = _step.value;\n      copyField(from, to, field);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n} // The incoming payload will have fields like:\n// {\n//   'myInt': {\n//     'intValue': '123'\n//   },\n//   'myDouble': {\n//     'doubleValue': 1.0\n//   },\n//   'myFloat': {\n//     'floatValue': 1.1\n//   },\n//   'myString': {\n//     'stringValue': 'hi!'\n//   }\n// }\n//\n// The following method will remove these four types of 'xValue' fields, flattening them\n// to just their values, as a string:\n// {\n//   'myInt': '123',\n//   'myDouble': '1.0',\n//   'myFloat': '1.1',\n//   'myString': 'hi!'\n// }\n//\n// Note that while 'intValue' will have a quoted payload, 'doubleValue' and 'floatValue' will not. This\n// is due to the encoding library, which renders int64 values as strings to avoid loss of precision. This\n// method always returns a string, similarly to avoid loss of precision, unlike the less-conservative\n// 'unwrapValue' method just below.\n\n/** @hidden */\n\n\nfunction unwrapValueAsString(wrapped) {\n  var key = _.keys(wrapped)[0];\n\n  return _.toString(wrapped[key]);\n} // Ditto as the method above, but returning the values in the idiomatic JavaScript type (string for strings,\n// number for numbers):\n// {\n//   'myInt': 123,\n//   'myDouble': 1.0,\n//   'myFloat': 1.1,\n//   'myString': 'hi!'\n// }\n//\n// The field names in the incoming xValue fields identify the type a value has, which for JavaScript's\n// purposes can be divided into 'number' versus 'string'. This method will render all the numbers as\n// JavaScript's 'number' type, since we prefer using idiomatic types. Note that this may lead to loss\n// in precision for int64 fields, so use with care.\n\n/** @hidden */\n\n\nvar xValueNumberFields = ['intValue', 'floatValue', 'doubleValue'];\n/** @hidden */\n\nfunction unwrapValue(wrapped) {\n  var key = _.keys(wrapped)[0];\n\n  var value = unwrapValueAsString(wrapped);\n  return _.includes(xValueNumberFields, key) ? _.toNumber(value) : value;\n} // The JSON payload delivers timestamp fields as strings of timestamps denoted in microseconds.\n// The JavaScript convention is to use numbers denoted in milliseconds. This method\n// makes it easy to convert a field of one type into the other.\n\n/** @hidden */\n\n\nfunction copyTimestampToMillis(from, to, fromName, toName) {\n  if (from[fromName] !== undefined) {\n    to[toName] = _.round(from[fromName] / 1000);\n  }\n} // The JSON payload delivers timestamp fields as strings of timestamps denoted in microseconds.\n// In our SDK, we'd like to present timestamp as ISO-format strings. This method makes it easy\n// to convert a field of one type into the other.\n\n/** @hidden */\n\n\nfunction copyTimestampToString(from, to, fromName, toName) {\n  if (from[fromName] !== undefined) {\n    to[toName] = new Date(from[fromName] / 1000).toISOString();\n  }\n}","map":null,"metadata":{},"sourceType":"script"}