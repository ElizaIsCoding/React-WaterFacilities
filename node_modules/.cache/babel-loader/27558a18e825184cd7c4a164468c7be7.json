{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FunctionBuilder = exports.runWith = exports.region = void 0;\n\nvar _ = require(\"lodash\");\n\nvar function_configuration_1 = require(\"./function-configuration\");\n\nvar analytics = require(\"./providers/analytics\");\n\nvar auth = require(\"./providers/auth\");\n\nvar database = require(\"./providers/database\");\n\nvar firestore = require(\"./providers/firestore\");\n\nvar https = require(\"./providers/https\");\n\nvar pubsub = require(\"./providers/pubsub\");\n\nvar remoteConfig = require(\"./providers/remoteConfig\");\n\nvar storage = require(\"./providers/storage\");\n\nvar testLab = require(\"./providers/testLab\");\n/**\n * Assert that the runtime options passed in are valid.\n * @param runtimeOptions object containing memory and timeout information.\n * @throws { Error } Memory and TimeoutSeconds values must be valid.\n */\n\n\nfunction assertRuntimeOptionsValid(runtimeOptions) {\n  if (runtimeOptions.memory && !_.includes(function_configuration_1.VALID_MEMORY_OPTIONS, runtimeOptions.memory)) {\n    throw new Error(\"The only valid memory allocation values are: \".concat(function_configuration_1.VALID_MEMORY_OPTIONS.join(', ')));\n  }\n\n  if (runtimeOptions.timeoutSeconds > function_configuration_1.MAX_TIMEOUT_SECONDS || runtimeOptions.timeoutSeconds < 0) {\n    throw new Error(\"TimeoutSeconds must be between 0 and \".concat(function_configuration_1.MAX_TIMEOUT_SECONDS));\n  }\n\n  if (runtimeOptions.ingressSettings && !_.includes(function_configuration_1.INGRESS_SETTINGS_OPTIONS, runtimeOptions.ingressSettings)) {\n    throw new Error(\"The only valid ingressSettings values are: \".concat(function_configuration_1.INGRESS_SETTINGS_OPTIONS.join(',')));\n  }\n\n  if (runtimeOptions.vpcConnectorEgressSettings && !_.includes(function_configuration_1.VPC_EGRESS_SETTINGS_OPTIONS, runtimeOptions.vpcConnectorEgressSettings)) {\n    throw new Error(\"The only valid vpcConnectorEgressSettings values are: \".concat(function_configuration_1.VPC_EGRESS_SETTINGS_OPTIONS.join(',')));\n  }\n\n  if (runtimeOptions.failurePolicy !== undefined) {\n    if (_.isBoolean(runtimeOptions.failurePolicy) === false && _.isObjectLike(runtimeOptions.failurePolicy) === false) {\n      throw new Error(\"failurePolicy must be a boolean or an object.\");\n    }\n\n    if (typeof runtimeOptions.failurePolicy === 'object') {\n      if (_.isObjectLike(runtimeOptions.failurePolicy.retry) === false || _.isEmpty(runtimeOptions.failurePolicy.retry) === false) {\n        throw new Error('failurePolicy.retry must be an empty object.');\n      }\n    }\n  }\n\n  if (runtimeOptions.serviceAccount && runtimeOptions.serviceAccount !== 'default' && !_.includes(runtimeOptions.serviceAccount, '@')) {\n    throw new Error(\"serviceAccount must be set to 'default', a service account email, or '{serviceAccountName}@'\");\n  }\n\n  return true;\n}\n/**\n * Assert regions specified are valid.\n * @param regions list of regions.\n * @throws { Error } Regions must be in list of supported regions.\n */\n\n\nfunction assertRegionsAreValid(regions) {\n  if (!regions.length) {\n    throw new Error('You must specify at least one region');\n  }\n\n  return true;\n}\n/**\n * Configure the regions that the function is deployed to.\n * @param regions One of more region strings.\n * @example\n * functions.region('us-east1')\n * @example\n * functions.region('us-east1', 'us-central1')\n */\n\n\nfunction region() {\n  for (var _len = arguments.length, regions = new Array(_len), _key = 0; _key < _len; _key++) {\n    regions[_key] = arguments[_key];\n  }\n\n  if (assertRegionsAreValid(regions)) {\n    return new FunctionBuilder({\n      regions: regions\n    });\n  }\n}\n\nexports.region = region;\n/**\n * Configure runtime options for the function.\n * @param runtimeOptions Object with optional fields:\n * 1. `memory`: amount of memory to allocate to the function, possible values\n *    are: '128MB', '256MB', '512MB', '1GB', '2GB', and '4GB'.\n * 2. `timeoutSeconds`: timeout for the function in seconds, possible values are\n *    0 to 540.\n * 3. `failurePolicy`: failure policy of the function, with boolean `true` being\n *    equivalent to providing an empty retry object.\n * 4. `vpcConnector`: id of a VPC connector in same project and region.\n * 5. `vpcConnectorEgressSettings`: when a vpcConnector is set, control which\n *    egress traffic is sent through the vpcConnector.\n * 6. `serviceAccount`: Specific service account for the function.\n * 7. `ingressSettings`: ingress settings for the function, which control where a HTTPS\n *    function can be called from.\n *\n * Value must not be null.\n */\n\nfunction runWith(runtimeOptions) {\n  if (assertRuntimeOptionsValid(runtimeOptions)) {\n    return new FunctionBuilder(runtimeOptions);\n  }\n}\n\nexports.runWith = runWith;\n\nvar FunctionBuilder = /*#__PURE__*/function () {\n  function FunctionBuilder(options) {\n    _classCallCheck(this, FunctionBuilder);\n\n    this.options = options;\n  }\n  /**\n   * Configure the regions that the function is deployed to.\n   * @param regions One or more region strings.\n   * @example\n   * functions.region('us-east1')\n   * @example\n   * functions.region('us-east1', 'us-central1')\n   */\n\n\n  _createClass(FunctionBuilder, [{\n    key: \"region\",\n    value: function region() {\n      for (var _len2 = arguments.length, regions = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        regions[_key2] = arguments[_key2];\n      }\n\n      if (assertRegionsAreValid(regions)) {\n        this.options.regions = regions;\n        return this;\n      }\n    }\n    /**\n     * Configure runtime options for the function.\n     * @param runtimeOptions Object with optional fields:\n     * 1. `memory`: amount of memory to allocate to the function, possible values\n     *    are: '128MB', '256MB', '512MB', '1GB', '2GB', and '4GB'.\n     * 2. `timeoutSeconds`: timeout for the function in seconds, possible values are\n     *    0 to 540.\n     * 3. `failurePolicy`: failure policy of the function, with boolean `true` being\n     *    equivalent to providing an empty retry object.\n     * 4. `vpcConnector`: id of a VPC connector in the same project and region\n     * 5. `vpcConnectorEgressSettings`: when a `vpcConnector` is set, control which\n     *    egress traffic is sent through the `vpcConnector`.\n     *\n     * Value must not be null.\n     */\n\n  }, {\n    key: \"runWith\",\n    value: function runWith(runtimeOptions) {\n      if (assertRuntimeOptionsValid(runtimeOptions)) {\n        this.options = _.assign(this.options, runtimeOptions);\n        return this;\n      }\n    }\n  }, {\n    key: \"https\",\n    get: function get() {\n      var _this = this;\n\n      if (this.options.failurePolicy !== undefined) {\n        console.warn('RuntimeOptions.failurePolicy is not supported in https functions.');\n      }\n\n      return {\n        /**\n         * Handle HTTP requests.\n         * @param handler A function that takes a request and response object,\n         * same signature as an Express app.\n         */\n        onRequest: function onRequest(handler) {\n          return https._onRequestWithOptions(handler, _this.options);\n        },\n\n        /**\n         * Declares a callable method for clients to call using a Firebase SDK.\n         * @param handler A method that takes a data and context and returns a value.\n         */\n        onCall: function onCall(handler) {\n          return https._onCallWithOptions(handler, _this.options);\n        }\n      };\n    }\n  }, {\n    key: \"database\",\n    get: function get() {\n      var _this2 = this;\n\n      return {\n        /**\n         * Selects a database instance that will trigger the function. If omitted,\n         * will pick the default database for your project.\n         * @param instance The Realtime Database instance to use.\n         */\n        instance: function instance(_instance) {\n          return database._instanceWithOptions(_instance, _this2.options);\n        },\n\n        /**\n         * Select Firebase Realtime Database Reference to listen to.\n         *\n         * This method behaves very similarly to the method of the same name in\n         * the client and Admin Firebase SDKs. Any change to the Database that\n         * affects the data at or below the provided `path` will fire an event in\n         * Cloud Functions.\n         *\n         * There are three important differences between listening to a Realtime\n         * Database event in Cloud Functions and using the Realtime Database in\n         * the client and Admin SDKs:\n         * 1. Cloud Functions allows wildcards in the `path` name. Any `path`\n         *    component in curly brackets (`{}`) is a wildcard that matches all\n         *    strings. The value that matched a certain invocation of a Cloud\n         *    Function is returned as part of the `context.params` object. For\n         *    example, `ref(\"messages/{messageId}\")` matches changes at\n         *    `/messages/message1` or `/messages/message2`, resulting in\n         *    `context.params.messageId` being set to `\"message1\"` or\n         *    `\"message2\"`, respectively.\n         * 2. Cloud Functions do not fire an event for data that already existed\n         *    before the Cloud Function was deployed.\n         * 3. Cloud Function events have access to more information, including\n         *    information about the user who triggered the Cloud Function.\n         * @param ref Path of the database to listen to.\n         */\n        ref: function ref(path) {\n          return database._refWithOptions(path, _this2.options);\n        }\n      };\n    }\n  }, {\n    key: \"firestore\",\n    get: function get() {\n      var _this3 = this;\n\n      return {\n        /**\n         * Select the Firestore document to listen to for events.\n         * @param path Full database path to listen to. This includes the name of\n         * the collection that the document is a part of. For example, if the\n         * collection is named \"users\" and the document is named \"Ada\", then the\n         * path is \"/users/Ada\".\n         */\n        document: function document(path) {\n          return firestore._documentWithOptions(path, _this3.options);\n        },\n\n        /** @hidden */\n        namespace: function namespace(_namespace) {\n          return firestore._namespaceWithOptions(_namespace, _this3.options);\n        },\n\n        /** @hidden */\n        database: function database(_database) {\n          return firestore._databaseWithOptions(_database, _this3.options);\n        }\n      };\n    }\n  }, {\n    key: \"analytics\",\n    get: function get() {\n      var _this4 = this;\n\n      return {\n        /**\n         * Select analytics events to listen to for events.\n         * @param analyticsEventType Name of the analytics event type.\n         */\n        event: function event(analyticsEventType) {\n          return analytics._eventWithOptions(analyticsEventType, _this4.options);\n        }\n      };\n    }\n  }, {\n    key: \"remoteConfig\",\n    get: function get() {\n      var _this5 = this;\n\n      return {\n        /**\n         * Handle all updates (including rollbacks) that affect a Remote Config\n         * project.\n         * @param handler A function that takes the updated Remote Config template\n         * version metadata as an argument.\n         */\n        onUpdate: function onUpdate(handler) {\n          return remoteConfig._onUpdateWithOptions(handler, _this5.options);\n        }\n      };\n    }\n  }, {\n    key: \"storage\",\n    get: function get() {\n      var _this6 = this;\n\n      return {\n        /**\n         * The optional bucket function allows you to choose which buckets' events\n         * to handle. This step can be bypassed by calling object() directly,\n         * which will use the default Cloud Storage for Firebase bucket.\n         * @param bucket Name of the Google Cloud Storage bucket to listen to.\n         */\n        bucket: function bucket(_bucket) {\n          return storage._bucketWithOptions(_this6.options, _bucket);\n        },\n\n        /**\n         * Handle events related to Cloud Storage objects.\n         */\n        object: function object() {\n          return storage._objectWithOptions(_this6.options);\n        }\n      };\n    }\n  }, {\n    key: \"pubsub\",\n    get: function get() {\n      var _this7 = this;\n\n      return {\n        /**\n         * Select Cloud Pub/Sub topic to listen to.\n         * @param topic Name of Pub/Sub topic, must belong to the same project as\n         * the function.\n         */\n        topic: function topic(_topic) {\n          return pubsub._topicWithOptions(_topic, _this7.options);\n        },\n        schedule: function schedule(_schedule) {\n          return pubsub._scheduleWithOptions(_schedule, _this7.options);\n        }\n      };\n    }\n  }, {\n    key: \"auth\",\n    get: function get() {\n      var _this8 = this;\n\n      return {\n        /**\n         * Handle events related to Firebase authentication users.\n         */\n        user: function user() {\n          return auth._userWithOptions(_this8.options);\n        }\n      };\n    }\n  }, {\n    key: \"testLab\",\n    get: function get() {\n      var _this9 = this;\n\n      return {\n        /**\n         * Handle events related to Test Lab test matrices.\n         */\n        testMatrix: function testMatrix() {\n          return testLab._testMatrixWithOpts(_this9.options);\n        }\n      };\n    }\n  }]);\n\n  return FunctionBuilder;\n}();\n\nexports.FunctionBuilder = FunctionBuilder;","map":null,"metadata":{},"sourceType":"script"}