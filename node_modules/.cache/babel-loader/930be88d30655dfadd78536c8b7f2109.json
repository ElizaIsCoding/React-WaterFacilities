{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\src\\\\components\\\\Timer.js\";\nimport React, { Component } from 'react'; // class Timer extends Component {\n//     constructor() {\n//       super();\n//       this.state = {\n//         time: {\n//           hours: 0,\n//           minutes: 0,\n//           seconds: 0,\n//           milliseconds: 0,\n//         },\n//         duration: 4 * 60 * 60 * 1000,\n//         timer: null\n//       };\n//       this.startTimer = this.start.bind(this);\n//     }\n//     msToTime(duration) {\n//       let milliseconds = parseInt((duration % 1000));\n//       let seconds = Math.floor((duration / 1000) % 60);\n//       let minutes = Math.floor((duration / (1000 * 60)) % 60);\n//       let hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n//       hours = hours.toString().padStart(2, '0');\n//       minutes = minutes.toString().padStart(2, '0');\n//       seconds = seconds.toString().padStart(2, '0');\n//       milliseconds = milliseconds.toString().padStart(3, '0');\n//       return {\n//         hours,\n//         minutes,\n//         seconds,\n//         milliseconds\n//       };\n//     }\n//     componentDidMount() {}\n//     start() {\n//       if (!this.state.timer) {\n//         this.state.startTime = Date.now();\n//         this.timer = window.setInterval(() => this.run(), 10);\n//       }\n//     }\n//     run() {\n//       const diff = Date.now() - this.state.startTime;\n//       // If you want to count up\n//       // this.setState(() => ({\n//       //  time: this.msToTime(diff)\n//       // }));\n//       // count down\n//       let remaining = this.state.duration - diff;\n//       if (remaining < 0) {\n//         remaining = 0;\n//       }\n//       this.setState(() => ({\n//         time: this.msToTime(remaining)\n//       }));\n//       if (remaining === 0) {\n//         window.clearTimeout(this.timer);\n//         this.timer = null;\n//       }\n//     }\n//     render() {\n//       return (\n//         <div>\n//         <button onClick = {this.startTimer}> Start </button> {this.state.time.hours}: {\n//           this.state.time.minutes\n//         }: {\n//           this.state.time.seconds\n//         }. {\n//           this.state.time.milliseconds\n//         }:\n//         </div>\n//       );\n//     }\n//   }\n// export default Timer;\n// import React from 'react';\n// // Renderer callback with condition\n// const Renderer = ({ hours, minutes, seconds, completed }) => {\n//   const timer = <span>case time is finished</span>;\n//   const completed = seconds\n//   if (completed) {\n//     console.log(completed)\n//     // Render a completed state\n//     return timer;\n//   } else {\n//     // Render a countdown\n//     return <span>{hours}:{minutes}:{seconds}</span>;\n//   }\n// };\n// export default Renderer;\n\nvar Timer = /*#__PURE__*/function (_Component) {\n  _inherits(Timer, _Component);\n\n  function Timer() {\n    var _this;\n\n    _classCallCheck(this, Timer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Timer).call(this));\n    _this.state = {\n      time: {},\n      seconds: 5\n    };\n    _this.timer = 0;\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Timer, [{\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours = Math.floor(secs / (60 * 60));\n      var divisor_for_minutes = secs % (60 * 60);\n      var minutes = Math.floor(divisor_for_minutes / 60);\n      var divisor_for_seconds = divisor_for_minutes % 60;\n      var seconds = Math.ceil(divisor_for_seconds);\n      var obj = {\n        \"h\": hours,\n        \"m\": minutes,\n        \"s\": seconds\n      };\n      return obj;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var timeLeftVar = this.secondsToTime(this.state.seconds);\n      this.setState({\n        time: timeLeftVar\n      });\n    }\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (this.timer == 0 && this.state.seconds > 0) {\n        this.timer = setInterval(this.countDown, 1000);\n      }\n    }\n  }, {\n    key: \"countDown\",\n    value: function countDown() {\n      // Remove one second, set state so a re-render happens.\n      var seconds = this.state.seconds - 1;\n      this.setState({\n        time: this.secondsToTime(seconds),\n        seconds: seconds\n      }); // Check if we're at zero.\n\n      if (seconds == 0) {\n        clearInterval(this.timer);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.startTimer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      }, \"Start\"), \"m: \", this.state.time.m, \" s: \", this.state.time.s);\n    }\n  }]);\n\n  return Timer;\n}(Component);\n\nexport default Timer;","map":{"version":3,"sources":["C:/Users/User/Documents/Course 2020/React-Water/src/components/Timer.js"],"names":["React","Component","Timer","state","time","seconds","timer","startTimer","bind","countDown","secs","hours","Math","floor","divisor_for_minutes","minutes","divisor_for_seconds","ceil","obj","timeLeftVar","secondsToTime","setState","setInterval","clearInterval","m","s"],"mappings":";;;;;;;AAAC,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAIMC,K;;;AACJ,mBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,OAAO,EAAE;AAArB,KAAb;AACA,UAAKC,KAAL,GAAa,CAAb;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,uDAAjB;AALY;AAMb;;;;kCAEaE,I,EAAK;AACjB,UAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,IAAI,KAAK,EAAT,CAAf,CAAZ;AAEA,UAAII,mBAAmB,GAAGJ,IAAI,IAAI,KAAK,EAAT,CAA9B;AACA,UAAIK,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAWC,mBAAmB,GAAG,EAAjC,CAAd;AAEA,UAAIE,mBAAmB,GAAGF,mBAAmB,GAAG,EAAhD;AACA,UAAIT,OAAO,GAAGO,IAAI,CAACK,IAAL,CAAUD,mBAAV,CAAd;AAEA,UAAIE,GAAG,GAAG;AACR,aAAKP,KADG;AAER,aAAKI,OAFG;AAGR,aAAKV;AAHG,OAAV;AAKA,aAAOa,GAAP;AACD;;;wCAEmB;AAClB,UAAIC,WAAW,GAAG,KAAKC,aAAL,CAAmB,KAAKjB,KAAL,CAAWE,OAA9B,CAAlB;AACA,WAAKgB,QAAL,CAAc;AAAEjB,QAAAA,IAAI,EAAEe;AAAR,OAAd;AACD;;;iCAEY;AACX,UAAI,KAAKb,KAAL,IAAc,CAAd,IAAmB,KAAKH,KAAL,CAAWE,OAAX,GAAqB,CAA5C,EAA+C;AAC7C,aAAKC,KAAL,GAAagB,WAAW,CAAC,KAAKb,SAAN,EAAiB,IAAjB,CAAxB;AACD;AACF;;;gCAEW;AACV;AACA,UAAIJ,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAX,GAAqB,CAAnC;AACA,WAAKgB,QAAL,CAAc;AACZjB,QAAAA,IAAI,EAAE,KAAKgB,aAAL,CAAmBf,OAAnB,CADM;AAEZA,QAAAA,OAAO,EAAEA;AAFG,OAAd,EAHU,CAQV;;AACA,UAAIA,OAAO,IAAI,CAAf,EAAkB;AAChBkB,QAAAA,aAAa,CAAC,KAAKjB,KAAN,CAAb;AACD;AACF;;;6BAEQ;AACP,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAQ,QAAA,OAAO,EAAE,KAAKC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,SAEM,KAAKJ,KAAL,CAAWC,IAAX,CAAgBoB,CAFtB,UAE6B,KAAKrB,KAAL,CAAWC,IAAX,CAAgBqB,CAF7C,CADF;AAMD;;;;EA1DiBxB,S;;AA6DpB,eAAeC,KAAf","sourcesContent":[" import React, { Component } from 'react';\r\n\r\n\r\n// class Timer extends Component {\r\n//     constructor() {\r\n//       super();\r\n//       this.state = {\r\n//         time: {\r\n//           hours: 0,\r\n//           minutes: 0,\r\n//           seconds: 0,\r\n//           milliseconds: 0,\r\n//         },\r\n//         duration: 4 * 60 * 60 * 1000,\r\n//         timer: null\r\n//       };\r\n//       this.startTimer = this.start.bind(this);\r\n//     }\r\n  \r\n//     msToTime(duration) {\r\n//       let milliseconds = parseInt((duration % 1000));\r\n//       let seconds = Math.floor((duration / 1000) % 60);\r\n//       let minutes = Math.floor((duration / (1000 * 60)) % 60);\r\n//       let hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\r\n  \r\n//       hours = hours.toString().padStart(2, '0');\r\n//       minutes = minutes.toString().padStart(2, '0');\r\n//       seconds = seconds.toString().padStart(2, '0');\r\n//       milliseconds = milliseconds.toString().padStart(3, '0');\r\n  \r\n//       return {\r\n//         hours,\r\n//         minutes,\r\n//         seconds,\r\n//         milliseconds\r\n//       };\r\n//     }\r\n  \r\n//     componentDidMount() {}\r\n  \r\n//     start() {\r\n//       if (!this.state.timer) {\r\n//         this.state.startTime = Date.now();\r\n//         this.timer = window.setInterval(() => this.run(), 10);\r\n//       }\r\n//     }\r\n  \r\n//     run() {\r\n//       const diff = Date.now() - this.state.startTime;\r\n      \r\n//       // If you want to count up\r\n//       // this.setState(() => ({\r\n//       //  time: this.msToTime(diff)\r\n//       // }));\r\n      \r\n//       // count down\r\n//       let remaining = this.state.duration - diff;\r\n//       if (remaining < 0) {\r\n//         remaining = 0;\r\n//       }\r\n//       this.setState(() => ({\r\n//         time: this.msToTime(remaining)\r\n//       }));\r\n//       if (remaining === 0) {\r\n//         window.clearTimeout(this.timer);\r\n//         this.timer = null;\r\n//       }\r\n//     }\r\n  \r\n//     render() {\r\n//       return (\r\n//         <div>\r\n//         <button onClick = {this.startTimer}> Start </button> {this.state.time.hours}: {\r\n//           this.state.time.minutes\r\n//         }: {\r\n//           this.state.time.seconds\r\n//         }. {\r\n//           this.state.time.milliseconds\r\n//         }:\r\n//         </div>\r\n//       );\r\n//     }\r\n//   }\r\n\r\n// export default Timer;\r\n\r\n\r\n\r\n// import React from 'react';\r\n\r\n// // Renderer callback with condition\r\n// const Renderer = ({ hours, minutes, seconds, completed }) => {\r\n//   const timer = <span>case time is finished</span>;\r\n//   const completed = seconds\r\n//   if (completed) {\r\n//     console.log(completed)\r\n//     // Render a completed state\r\n//     return timer;\r\n//   } else {\r\n//     // Render a countdown\r\n//     return <span>{hours}:{minutes}:{seconds}</span>;\r\n//   }\r\n// };\r\n// export default Renderer;\r\n\r\n\r\n\r\nclass Timer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { time: {}, seconds: 5 };\r\n    this.timer = 0;\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.countDown = this.countDown.bind(this);\r\n  }\r\n\r\n  secondsToTime(secs){\r\n    let hours = Math.floor(secs / (60 * 60));\r\n\r\n    let divisor_for_minutes = secs % (60 * 60);\r\n    let minutes = Math.floor(divisor_for_minutes / 60);\r\n\r\n    let divisor_for_seconds = divisor_for_minutes % 60;\r\n    let seconds = Math.ceil(divisor_for_seconds);\r\n\r\n    let obj = {\r\n      \"h\": hours,\r\n      \"m\": minutes,\r\n      \"s\": seconds\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  componentDidMount() {\r\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\r\n    this.setState({ time: timeLeftVar });\r\n  }\r\n\r\n  startTimer() {\r\n    if (this.timer == 0 && this.state.seconds > 0) {\r\n      this.timer = setInterval(this.countDown, 1000);\r\n    }\r\n  }\r\n\r\n  countDown() {\r\n    // Remove one second, set state so a re-render happens.\r\n    let seconds = this.state.seconds - 1;\r\n    this.setState({\r\n      time: this.secondsToTime(seconds),\r\n      seconds: seconds,\r\n    });\r\n    \r\n    // Check if we're at zero.\r\n    if (seconds == 0) { \r\n      clearInterval(this.timer);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <button onClick={this.startTimer}>Start</button>\r\n        m: {this.state.time.m} s: {this.state.time.s}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer\r\n"]},"metadata":{},"sourceType":"module"}