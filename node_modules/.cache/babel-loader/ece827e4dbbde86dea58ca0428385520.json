{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DocumentBuilder = exports.beforeSnapshotConstructor = exports.snapshotConstructor = exports.NamespaceBuilder = exports.DatabaseBuilder = exports._documentWithOptions = exports._namespaceWithOptions = exports._databaseWithOptions = exports.database = exports.namespace = exports.document = exports.defaultDatabase = exports.service = exports.provider = void 0;\n\nvar firebase = require(\"firebase-admin\");\n\nvar _ = require(\"lodash\");\n\nvar path_1 = require(\"path\");\n\nvar apps_1 = require(\"../apps\");\n\nvar cloud_functions_1 = require(\"../cloud-functions\");\n\nvar encoder_1 = require(\"../encoder\");\n/** @hidden */\n\n\nexports.provider = 'google.firestore';\n/** @hidden */\n\nexports.service = 'firestore.googleapis.com';\n/** @hidden */\n\nexports.defaultDatabase = '(default)';\nvar firestoreInstance;\n/**\n * Select the Firestore document to listen to for events.\n * @param path Full database path to listen to. This includes the name of\n * the collection that the document is a part of. For example, if the\n * collection is named \"users\" and the document is named \"Ada\", then the\n * path is \"/users/Ada\".\n */\n\nfunction document(path) {\n  return _documentWithOptions(path, {});\n}\n\nexports.document = document;\n/** @hidden */\n// Multiple namespaces are not yet supported by Firestore.\n\nfunction namespace(namespace) {\n  return _namespaceWithOptions(namespace, {});\n}\n\nexports.namespace = namespace;\n/** @hidden */\n// Multiple databases are not yet supported by Firestore.\n\nfunction database(database) {\n  return _databaseWithOptions(database, {});\n}\n\nexports.database = database;\n/** @hidden */\n\nfunction _databaseWithOptions() {\n  var database = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exports.defaultDatabase;\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  return new DatabaseBuilder(database, options);\n}\n\nexports._databaseWithOptions = _databaseWithOptions;\n/** @hidden */\n\nfunction _namespaceWithOptions(namespace, options) {\n  return _databaseWithOptions(exports.defaultDatabase, options).namespace(namespace);\n}\n\nexports._namespaceWithOptions = _namespaceWithOptions;\n/** @hidden */\n\nfunction _documentWithOptions(path, options) {\n  return _databaseWithOptions(exports.defaultDatabase, options).document(path);\n}\n\nexports._documentWithOptions = _documentWithOptions;\n\nvar DatabaseBuilder = /*#__PURE__*/function () {\n  /** @hidden */\n  function DatabaseBuilder(database, options) {\n    _classCallCheck(this, DatabaseBuilder);\n\n    this.database = database;\n    this.options = options;\n  }\n\n  _createClass(DatabaseBuilder, [{\n    key: \"namespace\",\n    value: function namespace(_namespace) {\n      return new NamespaceBuilder(this.database, this.options, _namespace);\n    }\n  }, {\n    key: \"document\",\n    value: function document(path) {\n      return new NamespaceBuilder(this.database, this.options).document(path);\n    }\n  }]);\n\n  return DatabaseBuilder;\n}();\n\nexports.DatabaseBuilder = DatabaseBuilder;\n\nvar NamespaceBuilder = /*#__PURE__*/function () {\n  /** @hidden */\n  function NamespaceBuilder(database, options, namespace) {\n    _classCallCheck(this, NamespaceBuilder);\n\n    this.database = database;\n    this.options = options;\n    this.namespace = namespace;\n  }\n\n  _createClass(NamespaceBuilder, [{\n    key: \"document\",\n    value: function document(path) {\n      var _this = this;\n\n      return new DocumentBuilder(function () {\n        if (!process.env.GCLOUD_PROJECT) {\n          throw new Error('process.env.GCLOUD_PROJECT is not set.');\n        }\n\n        var database = path_1.posix.join('projects', process.env.GCLOUD_PROJECT, 'databases', _this.database);\n        return path_1.posix.join(database, _this.namespace ? \"documents@\".concat(_this.namespace) : 'documents', path);\n      }, this.options);\n    }\n  }]);\n\n  return NamespaceBuilder;\n}();\n\nexports.NamespaceBuilder = NamespaceBuilder;\n\nfunction _getValueProto(data, resource, valueFieldName) {\n  if (_.isEmpty(_.get(data, valueFieldName))) {\n    // Firestore#snapshot_ takes resource string instead of proto for a non-existent snapshot\n    return resource;\n  }\n\n  var proto = {\n    fields: _.get(data, [valueFieldName, 'fields'], {}),\n    createTime: encoder_1.dateToTimestampProto(_.get(data, [valueFieldName, 'createTime'])),\n    updateTime: encoder_1.dateToTimestampProto(_.get(data, [valueFieldName, 'updateTime'])),\n    name: _.get(data, [valueFieldName, 'name'], resource)\n  };\n  return proto;\n}\n/** @hidden */\n\n\nfunction snapshotConstructor(event) {\n  if (!firestoreInstance) {\n    firestoreInstance = firebase.firestore(apps_1.apps().admin);\n  }\n\n  var valueProto = _getValueProto(event.data, event.context.resource.name, 'value');\n\n  var readTime = encoder_1.dateToTimestampProto(_.get(event, 'data.value.readTime'));\n  return firestoreInstance.snapshot_(valueProto, readTime, 'json');\n}\n\nexports.snapshotConstructor = snapshotConstructor;\n/** @hidden */\n// TODO remove this function when wire format changes to new format\n\nfunction beforeSnapshotConstructor(event) {\n  if (!firestoreInstance) {\n    firestoreInstance = firebase.firestore(apps_1.apps().admin);\n  }\n\n  var oldValueProto = _getValueProto(event.data, event.context.resource.name, 'oldValue');\n\n  var oldReadTime = encoder_1.dateToTimestampProto(_.get(event, 'data.oldValue.readTime'));\n  return firestoreInstance.snapshot_(oldValueProto, oldReadTime, 'json');\n}\n\nexports.beforeSnapshotConstructor = beforeSnapshotConstructor;\n\nfunction changeConstructor(raw) {\n  return cloud_functions_1.Change.fromObjects(beforeSnapshotConstructor(raw), snapshotConstructor(raw));\n}\n\nvar DocumentBuilder = /*#__PURE__*/function () {\n  /** @hidden */\n  function DocumentBuilder(triggerResource, options) {\n    _classCallCheck(this, DocumentBuilder);\n\n    this.triggerResource = triggerResource;\n    this.options = options; // TODO what validation do we want to do here?\n  }\n  /** Respond to all document writes (creates, updates, or deletes). */\n\n\n  _createClass(DocumentBuilder, [{\n    key: \"onWrite\",\n    value: function onWrite(handler) {\n      return this.onOperation(handler, 'document.write', changeConstructor);\n    }\n    /** Respond only to document updates. */\n\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(handler) {\n      return this.onOperation(handler, 'document.update', changeConstructor);\n    }\n    /** Respond only to document creations. */\n\n  }, {\n    key: \"onCreate\",\n    value: function onCreate(handler) {\n      return this.onOperation(handler, 'document.create', snapshotConstructor);\n    }\n    /** Respond only to document deletions. */\n\n  }, {\n    key: \"onDelete\",\n    value: function onDelete(handler) {\n      return this.onOperation(handler, 'document.delete', beforeSnapshotConstructor);\n    }\n  }, {\n    key: \"onOperation\",\n    value: function onOperation(handler, eventType, dataConstructor) {\n      return cloud_functions_1.makeCloudFunction({\n        handler: handler,\n        provider: exports.provider,\n        eventType: eventType,\n        service: exports.service,\n        triggerResource: this.triggerResource,\n        legacyEventType: \"providers/cloud.firestore/eventTypes/\".concat(eventType),\n        dataConstructor: dataConstructor,\n        options: this.options\n      });\n    }\n  }]);\n\n  return DocumentBuilder;\n}();\n\nexports.DocumentBuilder = DocumentBuilder;","map":null,"metadata":{},"sourceType":"script"}