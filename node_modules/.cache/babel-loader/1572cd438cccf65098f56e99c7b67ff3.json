{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.error = exports.warn = exports.info = exports.log = exports.debug = exports.write = void 0;\n\nvar util_1 = require(\"util\");\n\nvar common_1 = require(\"./logger/common\");\n\nfunction removeCircular(obj) {\n  var refs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (typeof obj !== 'object' || !obj) {\n    return obj;\n  }\n\n  if (refs.includes(obj)) {\n    return '[Circular]';\n  } else {\n    refs.push(obj);\n  }\n\n  var returnObj;\n\n  if (Array.isArray(obj)) {\n    returnObj = new Array(obj.length);\n  } else {\n    returnObj = {};\n  }\n\n  for (var k in obj) {\n    if (refs.includes(obj[k])) {\n      returnObj[k] = '[Circular]';\n    } else {\n      returnObj[k] = removeCircular(obj[k], refs);\n    }\n  }\n\n  return returnObj;\n}\n/**\n * Writes a `LogEntry` to `stdout`/`stderr` (depending on severity).\n * @param entry The `LogEntry` including severity, message, and any additional structured metadata.\n */\n\n\nfunction write(entry) {\n  if (common_1.SUPPORTS_STRUCTURED_LOGS) {\n    common_1.UNPATCHED_CONSOLE[common_1.CONSOLE_SEVERITY[entry.severity]](JSON.stringify(removeCircular(entry)));\n    return;\n  }\n\n  var message = entry.message || '';\n  var jsonPayload = {};\n  var jsonKeyCount = 0;\n\n  for (var k in entry) {\n    if (!['severity', 'message'].includes(k)) {\n      jsonKeyCount++;\n      jsonPayload[k] = entry[k];\n    }\n  }\n\n  if (jsonKeyCount > 0) {\n    message = \"\".concat(message, \" \").concat(JSON.stringify(removeCircular(jsonPayload), null, 2));\n  }\n\n  common_1.UNPATCHED_CONSOLE[common_1.CONSOLE_SEVERITY[entry.severity]](message);\n}\n\nexports.write = write;\n/**\n * Writes a `DEBUG` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\n\nfunction debug() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  write(entryFromArgs('DEBUG', args));\n}\n\nexports.debug = debug;\n/**\n * Writes an `INFO` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\n\nfunction log() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  write(entryFromArgs('INFO', args));\n}\n\nexports.log = log;\n/**\n * Writes an `INFO` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\n\nfunction info() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  write(entryFromArgs('INFO', args));\n}\n\nexports.info = info;\n/**\n * Writes a `WARNING` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\n\nfunction warn() {\n  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n\n  write(entryFromArgs('WARNING', args));\n}\n\nexports.warn = warn;\n/**\n * Writes an `ERROR` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\n\nfunction error() {\n  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    args[_key5] = arguments[_key5];\n  }\n\n  write(entryFromArgs('ERROR', args));\n}\n\nexports.error = error;\n/** @hidden */\n\nfunction entryFromArgs(severity, args) {\n  var entry = {};\n  var lastArg = args[args.length - 1];\n\n  if (lastArg && typeof lastArg == 'object' && lastArg.constructor == Object) {\n    entry = args.pop();\n  }\n\n  return Object.assign({}, entry, {\n    severity: severity,\n    // mimic `console.*` behavior, see https://nodejs.org/api/console.html#console_console_log_data_args\n    message: util_1.format.apply(null, args)\n  });\n}","map":null,"metadata":{},"sourceType":"script"}