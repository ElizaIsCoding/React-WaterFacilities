{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObjectBuilder = exports.BucketBuilder = exports._objectWithOptions = exports._bucketWithOptions = exports.object = exports.bucket = exports.service = exports.provider = void 0;\n\nvar cloud_functions_1 = require(\"../cloud-functions\");\n\nvar config_1 = require(\"../config\");\n/** @hidden */\n\n\nexports.provider = 'google.storage';\n/** @hidden */\n\nexports.service = 'storage.googleapis.com';\n/**\n * Registers a Cloud Function scoped to a specific storage bucket.\n *\n * @param bucket Name of the bucket to which this Cloud Function is\n *   scoped.\n *\n * @return Storage bucket builder interface.\n */\n\nfunction bucket(bucket) {\n  return _bucketWithOptions({}, bucket);\n}\n\nexports.bucket = bucket;\n/**\n * Registers a Cloud Function scoped to the default storage bucket for the\n * project.\n *\n * @return Storage object builder interface.\n */\n\nfunction object() {\n  return _objectWithOptions({});\n}\n\nexports.object = object;\n/** @hidden */\n\nfunction _bucketWithOptions(options, bucket) {\n  var resourceGetter = function resourceGetter() {\n    bucket = bucket || config_1.firebaseConfig().storageBucket;\n\n    if (!bucket) {\n      throw new Error('Missing bucket name. If you are unit testing, please provide a bucket name' + ' through `functions.storage.bucket(bucketName)`, or set process.env.FIREBASE_CONFIG.');\n    }\n\n    if (!/^[a-z\\d][a-z\\d\\\\._-]{1,230}[a-z\\d]$/.test(bucket)) {\n      throw new Error(\"Invalid bucket name \".concat(bucket));\n    }\n\n    return \"projects/_/buckets/\".concat(bucket);\n  };\n\n  return new BucketBuilder(resourceGetter, options);\n}\n\nexports._bucketWithOptions = _bucketWithOptions;\n/** @hidden */\n\nfunction _objectWithOptions(options) {\n  return _bucketWithOptions(options).object();\n}\n\nexports._objectWithOptions = _objectWithOptions;\n/**\n * The Google Cloud Storage bucket builder interface.\n *\n * Access via [`functions.storage.bucket()`](providers_storage_.html#bucket).\n */\n\nvar BucketBuilder = /*#__PURE__*/function () {\n  /** @hidden */\n  function BucketBuilder(triggerResource, options) {\n    _classCallCheck(this, BucketBuilder);\n\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n  /**\n   * Event handler which fires every time a Google Cloud Storage change occurs.\n   *\n   * @return Storage object builder interface scoped to the specified storage\n   *   bucket.\n   */\n\n\n  _createClass(BucketBuilder, [{\n    key: \"object\",\n    value: function object() {\n      return new ObjectBuilder(this.triggerResource, this.options);\n    }\n  }]);\n\n  return BucketBuilder;\n}();\n\nexports.BucketBuilder = BucketBuilder;\n/**\n * The Google Cloud Storage object builder interface.\n *\n * Access via [`functions.storage.object()`](providers_storage_.html#object).\n */\n\nvar ObjectBuilder = /*#__PURE__*/function () {\n  /** @hidden */\n  function ObjectBuilder(triggerResource, options) {\n    _classCallCheck(this, ObjectBuilder);\n\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n  /** @hidden */\n\n\n  _createClass(ObjectBuilder, [{\n    key: \"onChange\",\n    value: function onChange(handler) {\n      throw new Error('\"onChange\" is now deprecated, please use \"onArchive\", \"onDelete\", ' + '\"onFinalize\", or \"onMetadataUpdate\".');\n    }\n    /**\n     * Event handler sent only when a bucket has enabled object versioning.\n     * This event indicates that the live version of an object has become an\n     * archived version, either because it was archived or because it was\n     * overwritten by the upload of an object of the same name.\n     *\n     * @param handler Event handler which is run every time a Google Cloud Storage\n     *   archival occurs.\n     *\n     * @return A Cloud Function which you can export and deploy.\n     */\n\n  }, {\n    key: \"onArchive\",\n    value: function onArchive(handler) {\n      return this.onOperation(handler, 'object.archive');\n    }\n    /**\n     * Event handler which fires every time a Google Cloud Storage deletion occurs.\n     *\n     * Sent when an object has been permanently deleted. This includes objects\n     * that are overwritten or are deleted as part of the bucket's lifecycle\n     * configuration. For buckets with object versioning enabled, this is not\n     * sent when an object is archived, even if archival occurs\n     * via the `storage.objects.delete` method.\n     *\n     * @param handler Event handler which is run every time a Google Cloud Storage\n     *   deletion occurs.\n     *\n     * @return A Cloud Function which you can export and deploy.\n     */\n\n  }, {\n    key: \"onDelete\",\n    value: function onDelete(handler) {\n      return this.onOperation(handler, 'object.delete');\n    }\n    /**\n     * Event handler which fires every time a Google Cloud Storage object\n     * creation occurs.\n     *\n     * Sent when a new object (or a new generation of an existing object)\n     * is successfully created in the bucket. This includes copying or rewriting\n     * an existing object. A failed upload does not trigger this event.\n     *\n     * @param handler Event handler which is run every time a Google Cloud Storage\n     *   object creation occurs.\n     *\n     * @return A Cloud Function which you can export and deploy.\n     */\n\n  }, {\n    key: \"onFinalize\",\n    value: function onFinalize(handler) {\n      return this.onOperation(handler, 'object.finalize');\n    }\n    /**\n     * Event handler which fires every time the metadata of an existing object\n     * changes.\n     *\n     * @param handler Event handler which is run every time a Google Cloud Storage\n     *   metadata update occurs.\n     *\n     * @return A Cloud Function which you can export and deploy.\n     */\n\n  }, {\n    key: \"onMetadataUpdate\",\n    value: function onMetadataUpdate(handler) {\n      return this.onOperation(handler, 'object.metadataUpdate');\n    }\n    /** @hidden */\n\n  }, {\n    key: \"onOperation\",\n    value: function onOperation(handler, eventType) {\n      return cloud_functions_1.makeCloudFunction({\n        handler: handler,\n        provider: exports.provider,\n        service: exports.service,\n        eventType: eventType,\n        triggerResource: this.triggerResource,\n        options: this.options\n      });\n    }\n  }]);\n\n  return ObjectBuilder;\n}();\n\nexports.ObjectBuilder = ObjectBuilder;","map":null,"metadata":{},"sourceType":"script"}