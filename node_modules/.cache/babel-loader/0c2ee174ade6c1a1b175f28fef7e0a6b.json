{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DataSnapshot = exports.extractInstanceAndPath = exports.RefBuilder = exports._refWithOptions = exports.InstanceBuilder = exports._instanceWithOptions = exports.ref = exports.instance = exports.service = exports.provider = void 0;\n\nvar _ = require(\"lodash\");\n\nvar apps_1 = require(\"../apps\");\n\nvar cloud_functions_1 = require(\"../cloud-functions\");\n\nvar config_1 = require(\"../config\");\n\nvar path_1 = require(\"../utilities/path\");\n\nvar utils_1 = require(\"../utils\");\n/** @hidden */\n\n\nexports.provider = 'google.firebase.database';\n/** @hidden */\n\nexports.service = 'firebaseio.com';\nvar databaseURLRegex = new RegExp('^https://([^.]+).');\nvar emulatorDatabaseURLRegex = new RegExp('^http://.*ns=([^&]+)');\n/**\n * Registers a function that triggers on events from a specific\n * Firebase Realtime Database instance.\n *\n * Use this method together with `ref` to specify the instance on which to\n * watch for database events. For example: `firebase.database.instance('my-app-db-2').ref('/foo/bar')`\n *\n * Note that `functions.database.ref` used without `instance` watches the\n * *default* instance for events.\n *\n * @param instance The instance name of the database instance\n *   to watch for write events.\n * @return Firebase Realtime Database instance builder interface.\n */\n\nfunction instance(instance) {\n  return _instanceWithOptions(instance, {});\n}\n\nexports.instance = instance;\n/**\n * Registers a function that triggers on Firebase Realtime Database write\n * events.\n *\n * This method behaves very similarly to the method of the same name in the\n * client and Admin Firebase SDKs. Any change to the Database that affects the\n * data at or below the provided `path` will fire an event in Cloud Functions.\n *\n * There are three important differences between listening to a Realtime\n * Database event in Cloud Functions and using the Realtime Database in the\n * client and Admin SDKs:\n * 1. Cloud Functions allows wildcards in the `path` name. Any `path` component\n *    in curly brackets (`{}`) is a wildcard that matches all strings. The value\n *    that matched a certain invocation of a Cloud Function is returned as part\n *    of the [`EventContext.params`](cloud_functions_eventcontext.html#params object. For\n *    example, `ref(\"messages/{messageId}\")` matches changes at\n *    `/messages/message1` or `/messages/message2`, resulting in\n *    `event.params.messageId` being set to `\"message1\"` or `\"message2\"`,\n *    respectively.\n * 2. Cloud Functions do not fire an event for data that already existed before\n *    the Cloud Function was deployed.\n * 3. Cloud Function events have access to more information, including a\n *    snapshot of the previous event data and information about the user who\n *    triggered the Cloud Function.\n *\n * @param path The path within the Database to watch for write events.\n * @return Firebase Realtime Database builder interface.\n */\n\nfunction ref(path) {\n  return _refWithOptions(path, {});\n}\n\nexports.ref = ref;\n/** @hidden */\n\nfunction _instanceWithOptions(instance, options) {\n  return new InstanceBuilder(instance, options);\n}\n\nexports._instanceWithOptions = _instanceWithOptions;\n/**\n * The Firebase Realtime Database instance builder interface.\n *\n * Access via [`database.instance()`](providers_database_.html#instance).\n */\n\nvar InstanceBuilder = /*#__PURE__*/function () {\n  /** @hidden */\n  function InstanceBuilder(instance, options) {\n    _classCallCheck(this, InstanceBuilder);\n\n    this.instance = instance;\n    this.options = options;\n  }\n  /**\n   * @return Firebase Realtime Database reference builder interface.\n   */\n\n\n  _createClass(InstanceBuilder, [{\n    key: \"ref\",\n    value: function ref(path) {\n      var _this = this;\n\n      var normalized = path_1.normalizePath(path);\n      return new RefBuilder(apps_1.apps(), function () {\n        return \"projects/_/instances/\".concat(_this.instance, \"/refs/\").concat(normalized);\n      }, this.options);\n    }\n  }]);\n\n  return InstanceBuilder;\n}();\n\nexports.InstanceBuilder = InstanceBuilder;\n/** @hidden */\n\nfunction _refWithOptions(path, options) {\n  var resourceGetter = function resourceGetter() {\n    var normalized = path_1.normalizePath(path);\n    var databaseURL = config_1.firebaseConfig().databaseURL;\n\n    if (!databaseURL) {\n      throw new Error('Missing expected firebase config value databaseURL, ' + 'config is actually' + JSON.stringify(config_1.firebaseConfig()) + '\\n If you are unit testing, please set process.env.FIREBASE_CONFIG');\n    }\n\n    var instance = undefined;\n    var prodMatch = databaseURL.match(databaseURLRegex);\n\n    if (prodMatch) {\n      instance = prodMatch[1];\n    } else {\n      var emulatorMatch = databaseURL.match(emulatorDatabaseURLRegex);\n\n      if (emulatorMatch) {\n        instance = emulatorMatch[1];\n      }\n    }\n\n    if (!instance) {\n      throw new Error('Invalid value for config firebase.databaseURL: ' + databaseURL);\n    }\n\n    return \"projects/_/instances/\".concat(instance, \"/refs/\").concat(normalized);\n  };\n\n  return new RefBuilder(apps_1.apps(), resourceGetter, options);\n}\n\nexports._refWithOptions = _refWithOptions;\n/**\n * The Firebase Realtime Database reference builder interface.\n *\n * Access via [`functions.database.ref()`](functions.database#.ref).\n */\n\nvar RefBuilder = /*#__PURE__*/function () {\n  /** @hidden */\n  function RefBuilder(apps, triggerResource, options) {\n    var _this2 = this;\n\n    _classCallCheck(this, RefBuilder);\n\n    this.apps = apps;\n    this.triggerResource = triggerResource;\n    this.options = options;\n\n    this.changeConstructor = function (raw) {\n      var _extractInstanceAndPa = extractInstanceAndPath(raw.context.resource.name, raw.context.domain),\n          _extractInstanceAndPa2 = _slicedToArray(_extractInstanceAndPa, 2),\n          dbInstance = _extractInstanceAndPa2[0],\n          path = _extractInstanceAndPa2[1];\n\n      var before = new DataSnapshot(raw.data.data, path, _this2.apps.admin, dbInstance);\n      var after = new DataSnapshot(utils_1.applyChange(raw.data.data, raw.data.delta), path, _this2.apps.admin, dbInstance);\n      return {\n        before: before,\n        after: after\n      };\n    };\n  }\n  /**\n   * Event handler that fires every time a Firebase Realtime Database write\n   * of any kind (creation, update, or delete) occurs.\n   *\n   * @param handler Event handler that runs every time a Firebase Realtime Database\n   *   write occurs.\n   * @return A Cloud Function that you can export and deploy.\n   */\n\n\n  _createClass(RefBuilder, [{\n    key: \"onWrite\",\n    value: function onWrite(handler) {\n      return this.onOperation(handler, 'ref.write', this.changeConstructor);\n    }\n    /**\n     * Event handler that fires every time data is updated in\n     * Firebase Realtime Database.\n     *\n     * @param handler Event handler which is run every time a Firebase Realtime Database\n     *   write occurs.\n     * @return A Cloud\n     *   Function which you can export and deploy.\n     */\n\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(handler) {\n      return this.onOperation(handler, 'ref.update', this.changeConstructor);\n    }\n    /**\n     * Event handler that fires every time new data is created in\n     * Firebase Realtime Database.\n     *\n     * @param handler Event handler that runs every time new data is created in\n     *   Firebase Realtime Database.\n     * @return A Cloud Function that you can export and deploy.\n     */\n\n  }, {\n    key: \"onCreate\",\n    value: function onCreate(handler) {\n      var _this3 = this;\n\n      var dataConstructor = function dataConstructor(raw) {\n        var _extractInstanceAndPa3 = extractInstanceAndPath(raw.context.resource.name, raw.context.domain),\n            _extractInstanceAndPa4 = _slicedToArray(_extractInstanceAndPa3, 2),\n            dbInstance = _extractInstanceAndPa4[0],\n            path = _extractInstanceAndPa4[1];\n\n        return new DataSnapshot(raw.data.delta, path, _this3.apps.admin, dbInstance);\n      };\n\n      return this.onOperation(handler, 'ref.create', dataConstructor);\n    }\n    /**\n     * Event handler that fires every time data is deleted from\n     * Firebase Realtime Database.\n     *\n     * @param handler Event handler that runs every time data is deleted from\n     *   Firebase Realtime Database.\n     * @return A Cloud Function that you can export and deploy.\n     */\n\n  }, {\n    key: \"onDelete\",\n    value: function onDelete(handler) {\n      var _this4 = this;\n\n      var dataConstructor = function dataConstructor(raw) {\n        var _extractInstanceAndPa5 = extractInstanceAndPath(raw.context.resource.name, raw.context.domain),\n            _extractInstanceAndPa6 = _slicedToArray(_extractInstanceAndPa5, 2),\n            dbInstance = _extractInstanceAndPa6[0],\n            path = _extractInstanceAndPa6[1];\n\n        return new DataSnapshot(raw.data.data, path, _this4.apps.admin, dbInstance);\n      };\n\n      return this.onOperation(handler, 'ref.delete', dataConstructor);\n    }\n  }, {\n    key: \"onOperation\",\n    value: function onOperation(handler, eventType, dataConstructor) {\n      var _this5 = this;\n\n      return cloud_functions_1.makeCloudFunction({\n        handler: handler,\n        provider: exports.provider,\n        service: exports.service,\n        eventType: eventType,\n        legacyEventType: \"providers/\".concat(exports.provider, \"/eventTypes/\").concat(eventType),\n        triggerResource: this.triggerResource,\n        dataConstructor: dataConstructor,\n        before: function before(event) {\n          return _this5.apps.retain();\n        },\n        after: function after(event) {\n          return _this5.apps.release();\n        },\n        options: this.options\n      });\n    }\n  }]);\n\n  return RefBuilder;\n}();\n\nexports.RefBuilder = RefBuilder;\n/**\n * Utility function to extract database reference from resource string\n *\n * @param optional database domain override for the original of the source database.\n *    It defaults to `firebaseio.com`.\n *    Multi-region RTDB will be served from different domains.\n *    Since region is not part of the resource name, it is provided through context.\n */\n\n/** @hidden */\n\nfunction extractInstanceAndPath(resource) {\n  var domain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'firebaseio.com';\n  var resourceRegex = \"projects/([^/]+)/instances/([a-zA-Z0-9-^/]+)/refs(/.+)?\";\n  var match = resource.match(new RegExp(resourceRegex));\n\n  if (!match) {\n    throw new Error(\"Unexpected resource string for Firebase Realtime Database event: \".concat(resource, \". \") + 'Expected string in the format of \"projects/_/instances/{firebaseioSubdomain}/refs/{ref=**}\"');\n  }\n\n  var _match = _slicedToArray(match, 4),\n      project = _match[1],\n      dbInstanceName = _match[2],\n      path = _match[3];\n\n  if (project !== '_') {\n    throw new Error(\"Expect project to be '_' in a Firebase Realtime Database event\");\n  }\n\n  var emuHost = process.env.FIREBASE_DATABASE_EMULATOR_HOST;\n\n  if (emuHost) {\n    var dbInstance = \"http://\".concat(emuHost, \"/?ns=\").concat(dbInstanceName);\n    return [dbInstance, path];\n  } else {\n    var _dbInstance = 'https://' + dbInstanceName + '.' + domain;\n\n    return [_dbInstance, path];\n  }\n}\n\nexports.extractInstanceAndPath = extractInstanceAndPath;\n/**\n * Interface representing a Firebase Realtime Database data snapshot.\n */\n\nvar DataSnapshot = /*#__PURE__*/function () {\n  function DataSnapshot(data, path, // path will be undefined for the database root\n  app, instance) {\n    _classCallCheck(this, DataSnapshot);\n\n    this.app = app;\n\n    if (app && app.options.databaseURL.startsWith('http:')) {\n      // In this case we're dealing with an emulator\n      this.instance = app.options.databaseURL;\n    } else if (instance) {\n      // SDK always supplies instance, but user's unit tests may not\n      this.instance = instance;\n    } else if (app) {\n      this.instance = app.options.databaseURL;\n    } else if (process.env.GCLOUD_PROJECT) {\n      this.instance = 'https://' + process.env.GCLOUD_PROJECT + '.firebaseio.com';\n    }\n\n    this._path = path;\n    this._data = data;\n  }\n  /**\n   * Returns a [`Reference`](/docs/reference/admin/node/admin.database.Reference)\n   * to the Database location where the triggering write occurred. Has\n   * full read and write access.\n   */\n\n\n  _createClass(DataSnapshot, [{\n    key: \"val\",\n\n    /**\n     * Extracts a JavaScript value from a `DataSnapshot`.\n     *\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n     * scalar type (string, number, or boolean), an array, or an object. It may also\n     * return `null`, indicating that the `DataSnapshot` is empty (contains no\n     * data).\n     *\n     * @return The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    value: function val() {\n      var parts = path_1.pathParts(this._childPath);\n      var source = this._data;\n\n      var node = _.cloneDeep(parts.length ? _.get(source, parts, null) : source);\n\n      return this._checkAndConvertToArray(node);\n    }\n    /**\n     * Exports the entire contents of the `DataSnapshot` as a JavaScript object.\n     *\n     * The `exportVal()` method is similar to `val()`, except priority information\n     * is included (if available), making it suitable for backing up your data.\n     *\n     * @return The contents of the `DataSnapshot` as a JavaScript value\n     *   (Object, Array, string, number, boolean, or `null`).\n     */\n\n  }, {\n    key: \"exportVal\",\n    value: function exportVal() {\n      return this.val();\n    }\n    /**\n     * Gets the priority value of the data in this `DataSnapshot`.\n     *\n     * As an alternative to using priority, applications can order collections by\n     * ordinary properties. See [Sorting and filtering\n     * data](/docs/database/web/lists-of-data#sorting_and_filtering_data).\n     *\n     * @return The priority value of the data.\n     */\n\n  }, {\n    key: \"getPriority\",\n    value: function getPriority() {\n      return 0;\n    }\n    /**\n     * Returns `true` if this `DataSnapshot` contains any data. It is slightly more\n     * efficient than using `snapshot.val() !== null`.\n     *\n     * @return `true` if this `DataSnapshot` contains any data; otherwise, `false`.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function exists() {\n      return !_.isNull(this.val());\n    }\n    /**\n     * Gets a `DataSnapshot` for the location at the specified relative path.\n     *\n     * The relative path can either be a simple child name (for example, \"ada\") or\n     * a deeper slash-separated path (for example, \"ada/name/first\").\n     *\n     * @param path A relative path from this location to the desired child\n     *   location.\n     * @return The specified child location.\n     */\n\n  }, {\n    key: \"child\",\n    value: function child(childPath) {\n      if (!childPath) {\n        return this;\n      }\n\n      return this._dup(childPath);\n    }\n    /**\n     * Enumerates the `DataSnapshot`s of the children items.\n     *\n     * Because of the way JavaScript objects work, the ordering of data in the\n     * JavaScript object returned by `val()` is not guaranteed to match the ordering\n     * on the server nor the ordering of `child_added` events. That is where\n     * `forEach()` comes in handy. It guarantees the children of a `DataSnapshot`\n     * will be iterated in their query order.\n     *\n     * If no explicit `orderBy*()` method is used, results are returned\n     * ordered by key (unless priorities are used, in which case, results are\n     * returned by priority).\n     *\n     * @param action A function that will be called for each child `DataSnapshot`.\n     *   The callback can return `true` to cancel further enumeration.\n     *\n     * @return `true` if enumeration was canceled due to your callback\n     *   returning `true`.\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(action) {\n      var _this6 = this;\n\n      var val = this.val();\n\n      if (_.isPlainObject(val)) {\n        return _.some(val, function (value, key) {\n          return action(_this6.child(key)) === true;\n        });\n      }\n\n      return false;\n    }\n    /**\n     * Returns `true` if the specified child path has (non-`null`) data.\n     *\n     * @param path A relative path to the location of a potential child.\n     * @return `true` if data exists at the specified child path; otherwise,\n     *   `false`.\n     */\n\n  }, {\n    key: \"hasChild\",\n    value: function hasChild(childPath) {\n      return this.child(childPath).exists();\n    }\n    /**\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\n     * properties.\n     *\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n     * children. If it does, you can enumerate them using `forEach()`. If it\n     * doesn't, then either this snapshot contains a primitive value (which can be\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\n     * `null`).\n     *\n     * @return `true` if this snapshot has any children; else `false`.\n     */\n\n  }, {\n    key: \"hasChildren\",\n    value: function hasChildren() {\n      var val = this.val();\n      return _.isPlainObject(val) && _.keys(val).length > 0;\n    }\n    /**\n     * Returns the number of child properties of this `DataSnapshot`.\n     *\n     * @return Number of child properties of this `DataSnapshot`.\n     */\n\n  }, {\n    key: \"numChildren\",\n    value: function numChildren() {\n      var val = this.val();\n      return _.isPlainObject(val) ? Object.keys(val).length : 0;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @return A JSON-serializable representation of this object.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.val();\n    }\n    /** Recursive function to check if keys are numeric & convert node object to array if they are\n     *\n     * @hidden\n     */\n\n  }, {\n    key: \"_checkAndConvertToArray\",\n    value: function _checkAndConvertToArray(node) {\n      if (node === null || typeof node === 'undefined') {\n        return null;\n      }\n\n      if (typeof node !== 'object') {\n        return node;\n      }\n\n      var obj = {};\n      var numKeys = 0;\n      var maxKey = 0;\n      var allIntegerKeys = true;\n\n      for (var key in node) {\n        if (!node.hasOwnProperty(key)) {\n          continue;\n        }\n\n        var childNode = node[key];\n        obj[key] = this._checkAndConvertToArray(childNode);\n        numKeys++;\n        var integerRegExp = /^(0|[1-9]\\d*)$/;\n\n        if (allIntegerKeys && integerRegExp.test(key)) {\n          maxKey = Math.max(maxKey, Number(key));\n        } else {\n          allIntegerKeys = false;\n        }\n      }\n\n      if (allIntegerKeys && maxKey < 2 * numKeys) {\n        // convert to array.\n        var array = [];\n\n        _.forOwn(obj, function (val, key) {\n          array[key] = val;\n        });\n\n        return array;\n      }\n\n      return obj;\n    }\n    /** @hidden */\n\n  }, {\n    key: \"_dup\",\n    value: function _dup(childPath) {\n      var dup = new DataSnapshot(this._data, undefined, this.app, this.instance);\n      var _ref = [this._path, this._childPath];\n      dup._path = _ref[0];\n      dup._childPath = _ref[1];\n\n      if (childPath) {\n        dup._childPath = path_1.joinPath(dup._childPath, childPath);\n      }\n\n      return dup;\n    }\n    /** @hidden */\n\n  }, {\n    key: \"_fullPath\",\n    value: function _fullPath() {\n      var out = (this._path || '') + '/' + (this._childPath || '');\n      return out;\n    }\n  }, {\n    key: \"ref\",\n    get: function get() {\n      if (!this.app) {\n        // may be unpopulated in user's unit tests\n        throw new Error('Please supply a Firebase app in the constructor for DataSnapshot' + ' in order to use the .ref method.');\n      }\n\n      if (!this._ref) {\n        this._ref = this.app.database(this.instance).ref(this._fullPath());\n      }\n\n      return this._ref;\n    }\n    /**\n     * The key (last part of the path) of the location of this `DataSnapshot`.\n     *\n     * The last token in a Database location is considered its key. For example,\n     * \"ada\" is the key for the `/users/ada/` node. Accessing the key on any\n     * `DataSnapshot` will return the key for the location that generated it.\n     * However, accessing the key on the root URL of a Database will return `null`.\n     */\n\n  }, {\n    key: \"key\",\n    get: function get() {\n      var last = _.last(path_1.pathParts(this._fullPath()));\n\n      return !last || last === '' ? null : last;\n    }\n  }]);\n\n  return DataSnapshot;\n}();\n\nexports.DataSnapshot = DataSnapshot;","map":null,"metadata":{},"sourceType":"script"}