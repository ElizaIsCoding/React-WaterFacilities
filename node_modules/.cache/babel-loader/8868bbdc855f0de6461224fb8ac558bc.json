{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.apps = void 0;\n\nvar firebase = require(\"firebase-admin\");\n\nvar _ = require(\"lodash\");\n\nvar config_1 = require(\"./config\");\n\nfunction apps() {\n  if (typeof apps.singleton === 'undefined') {\n    apps.init();\n  }\n\n  return apps.singleton;\n}\n\nexports.apps = apps;\n\n(function (apps) {\n  /** @hidden */\n  apps.garbageCollectionInterval = 2 * 60 * 1000;\n  /** @hidden */\n\n  function delay(delay) {\n    return new Promise(function (resolve) {\n      setTimeout(resolve, delay);\n    });\n  }\n\n  apps.delay = delay;\n\n  apps.init = function () {\n    return apps.singleton = new Apps();\n  };\n\n  var Apps = /*#__PURE__*/function () {\n    function Apps() {\n      _classCallCheck(this, Apps);\n\n      this._refCounter = {};\n    }\n\n    _createClass(Apps, [{\n      key: \"_appAlive\",\n      value: function _appAlive(appName) {\n        try {\n          var app = firebase.app(appName);\n          return !_.get(app, 'isDeleted_');\n        } catch (e) {\n          return false;\n        }\n      }\n    }, {\n      key: \"_destroyApp\",\n      value: function _destroyApp(appName) {\n        if (!this._appAlive(appName)) {\n          return;\n        }\n\n        firebase.app(appName).delete().catch(_.noop);\n      }\n    }, {\n      key: \"retain\",\n      value: function retain() {\n        var increment = function increment(n) {\n          return (n || 0) + 1;\n        }; // Increment counter for admin because function might use event.data.ref\n\n\n        _.update(this._refCounter, '__admin__', increment);\n      }\n    }, {\n      key: \"release\",\n      value: function release() {\n        var _this = this;\n\n        var decrement = function decrement(n) {\n          return n - 1;\n        };\n\n        return delay(apps.garbageCollectionInterval).then(function () {\n          _.update(_this._refCounter, '__admin__', decrement);\n\n          _.forEach(_this._refCounter, function (count, key) {\n            if (count <= 0) {\n              _this._destroyApp(key);\n            }\n          });\n        });\n      }\n    }, {\n      key: \"setEmulatedAdminApp\",\n\n      /**\n       * This function allows the Firebase Emulator Suite to override the FirebaseApp instance\n       * used by the Firebase Functions SDK. Developers should never call this function for\n       * other purposes.\n       */\n      value: function setEmulatedAdminApp(app) {\n        this._emulatedAdminApp = app;\n      }\n    }, {\n      key: \"admin\",\n      get: function get() {\n        if (this._emulatedAdminApp) {\n          return this._emulatedAdminApp;\n        }\n\n        if (this._appAlive('__admin__')) {\n          return firebase.app('__admin__');\n        }\n\n        return firebase.initializeApp(this.firebaseArgs, '__admin__');\n      }\n    }, {\n      key: \"firebaseArgs\",\n      get: function get() {\n        return _.assign({}, config_1.firebaseConfig(), {\n          credential: firebase.credential.applicationDefault()\n        });\n      }\n    }]);\n\n    return Apps;\n  }();\n\n  apps.Apps = Apps;\n})(apps = exports.apps || (exports.apps = {}));","map":null,"metadata":{},"sourceType":"script"}