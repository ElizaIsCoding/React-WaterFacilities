{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\src\\\\components\\\\Timer.js\";\nimport React, { Component } from 'react'; // class Timer extends Component {\n//     constructor() {\n//       super();\n//       this.state = {\n//         time: {\n//           hours: 0,\n//           minutes: 0,\n//           seconds: 0,\n//           milliseconds: 0,\n//         },\n//         duration: 4 * 60 * 60 * 1000,\n//         timer: null\n//       };\n//       this.startTimer = this.start.bind(this);\n//     }\n//     msToTime(duration) {\n//       let milliseconds = parseInt((duration % 1000));\n//       let seconds = Math.floor((duration / 1000) % 60);\n//       let minutes = Math.floor((duration / (1000 * 60)) % 60);\n//       let hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n//       hours = hours.toString().padStart(2, '0');\n//       minutes = minutes.toString().padStart(2, '0');\n//       seconds = seconds.toString().padStart(2, '0');\n//       milliseconds = milliseconds.toString().padStart(3, '0');\n//       return {\n//         hours,\n//         minutes,\n//         seconds,\n//         milliseconds\n//       };\n//     }\n//     componentDidMount() {}\n//     start() {\n//       if (!this.state.timer) {\n//         this.state.startTime = Date.now();\n//         this.timer = window.setInterval(() => this.run(), 10);\n//       }\n//     }\n//     run() {\n//       const diff = Date.now() - this.state.startTime;\n//       // If you want to count up\n//       // this.setState(() => ({\n//       //  time: this.msToTime(diff)\n//       // }));\n//       // count down\n//       let remaining = this.state.duration - diff;\n//       if (remaining < 0) {\n//         remaining = 0;\n//       }\n//       this.setState(() => ({\n//         time: this.msToTime(remaining)\n//       }));\n//       if (remaining === 0) {\n//         window.clearTimeout(this.timer);\n//         this.timer = null;\n//       }\n//     }\n//     render() {\n//       return (\n//         <div>\n//         <button onClick = {this.startTimer}> Start </button> {this.state.time.hours}: {\n//           this.state.time.minutes\n//         }: {\n//           this.state.time.seconds\n//         }. {\n//           this.state.time.milliseconds\n//         }:\n//         </div>\n//       );\n//     }\n//   }\n// export default Timer;\n\nvar Timer = /*#__PURE__*/function (_Component) {\n  _inherits(Timer, _Component);\n\n  function Timer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Timer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Timer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      myInterval: null\n    };\n\n    _this.startTimer = function () {\n      _this.setState({\n        myInterval: setInterval(_this.props.countDown, 1000)\n      });\n    };\n\n    _this.stopTimer = function () {\n      clearInterval(_this.state.myInterval);\n    };\n\n    return _this;\n  }\n\n  _createClass(Timer, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.startTimer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }\n      }, \"Start\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.stopTimer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }\n      }, \"Stop\"), this.props.time);\n    }\n  }]);\n\n  return Timer;\n}(Component);\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf3;\n\n    var _this2;\n\n    _classCallCheck(this, App);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this2 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(App)).call.apply(_getPrototypeOf3, [this].concat(args)));\n    _this2.state = {\n      time: 4 * 60 * 60 * 1000\n    };\n\n    _this2.countDown = function () {\n      _this2.setState({\n        time: _this2.state.time - 1000\n      });\n    };\n\n    return _this2;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(Controls, {\n        time: this.state.time,\n        countDown: this.countDown,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 14\n        }\n      });\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default Timer;","map":{"version":3,"sources":["C:/Users/User/Documents/Course 2020/React-Water/src/components/Timer.js"],"names":["React","Component","Timer","state","myInterval","startTimer","setState","setInterval","props","countDown","stopTimer","clearInterval","time","App"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;IAEMC,K;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACJC,MAAAA,UAAU,EAAG;AADT,K;;UAGRC,U,GAAa,YAAM;AACf,YAAKC,QAAL,CAAc;AAACF,QAAAA,UAAU,EAAGG,WAAW,CAAC,MAAKC,KAAL,CAAWC,SAAZ,EAAsB,IAAtB;AAAzB,OAAd;AACH,K;;UACDC,S,GAAY,YAAM;AACdC,MAAAA,aAAa,CAAC,MAAKR,KAAL,CAAWC,UAAZ,CAAb;AACH,K;;;;;;;6BACO;AACJ,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAQ,QAAA,OAAO,EAAE,KAAKC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI;AAAQ,QAAA,OAAO,EAAE,KAAKK,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGK,KAAKF,KAAL,CAAWI,IAHhB,CADJ;AAOH;;;;EAlBiBX,S;;IAsBdY,G;;;;;;;;;;;;;;;WACJV,K,GAAO;AACHS,MAAAA,IAAI,EAAE,IAAI,EAAJ,GAAS,EAAT,GAAc;AADjB,K;;WAGPH,S,GAAY,YAAM;AACd,aAAKH,QAAL,CAAc;AACVM,QAAAA,IAAI,EAAG,OAAKT,KAAL,CAAWS,IAAX,GAAgB;AADb,OAAd;AAGH,K;;;;;;;6BAEO;AACJ,0BAAO,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAE,KAAKT,KAAL,CAAWS,IAA3B;AAAiC,QAAA,SAAS,EAAE,KAAKH,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;;;EAZeT,KAAK,CAACC,S;;AAexB,eAAeC,KAAf","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\n// class Timer extends Component {\r\n//     constructor() {\r\n//       super();\r\n//       this.state = {\r\n//         time: {\r\n//           hours: 0,\r\n//           minutes: 0,\r\n//           seconds: 0,\r\n//           milliseconds: 0,\r\n//         },\r\n//         duration: 4 * 60 * 60 * 1000,\r\n//         timer: null\r\n//       };\r\n//       this.startTimer = this.start.bind(this);\r\n//     }\r\n  \r\n//     msToTime(duration) {\r\n//       let milliseconds = parseInt((duration % 1000));\r\n//       let seconds = Math.floor((duration / 1000) % 60);\r\n//       let minutes = Math.floor((duration / (1000 * 60)) % 60);\r\n//       let hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\r\n  \r\n//       hours = hours.toString().padStart(2, '0');\r\n//       minutes = minutes.toString().padStart(2, '0');\r\n//       seconds = seconds.toString().padStart(2, '0');\r\n//       milliseconds = milliseconds.toString().padStart(3, '0');\r\n  \r\n//       return {\r\n//         hours,\r\n//         minutes,\r\n//         seconds,\r\n//         milliseconds\r\n//       };\r\n//     }\r\n  \r\n//     componentDidMount() {}\r\n  \r\n//     start() {\r\n//       if (!this.state.timer) {\r\n//         this.state.startTime = Date.now();\r\n//         this.timer = window.setInterval(() => this.run(), 10);\r\n//       }\r\n//     }\r\n  \r\n//     run() {\r\n//       const diff = Date.now() - this.state.startTime;\r\n      \r\n//       // If you want to count up\r\n//       // this.setState(() => ({\r\n//       //  time: this.msToTime(diff)\r\n//       // }));\r\n      \r\n//       // count down\r\n//       let remaining = this.state.duration - diff;\r\n//       if (remaining < 0) {\r\n//         remaining = 0;\r\n//       }\r\n//       this.setState(() => ({\r\n//         time: this.msToTime(remaining)\r\n//       }));\r\n//       if (remaining === 0) {\r\n//         window.clearTimeout(this.timer);\r\n//         this.timer = null;\r\n//       }\r\n//     }\r\n  \r\n//     render() {\r\n//       return (\r\n//         <div>\r\n//         <button onClick = {this.startTimer}> Start </button> {this.state.time.hours}: {\r\n//           this.state.time.minutes\r\n//         }: {\r\n//           this.state.time.seconds\r\n//         }. {\r\n//           this.state.time.milliseconds\r\n//         }:\r\n//         </div>\r\n//       );\r\n//     }\r\n//   }\r\n\r\n// export default Timer;\r\n\r\nclass Timer extends Component{\r\n  state = {\r\n      myInterval : null\r\n  }\r\n  startTimer = () => {\r\n      this.setState({myInterval : setInterval(this.props.countDown,1000)})\r\n  }\r\n  stopTimer = () => {\r\n      clearInterval(this.state.myInterval)\r\n  }\r\n  render(){\r\n      return(\r\n          <div>\r\n              <button onClick={this.startTimer}>Start</button>\r\n              <button onClick={this.stopTimer}>Stop</button>\r\n              {this.props.time}\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\n\r\nclass App extends React.Component{\r\n  state ={\r\n      time: 4 * 60 * 60 * 1000\r\n  }\r\n  countDown = () => {\r\n      this.setState({\r\n          time : this.state.time-1000,\r\n      })\r\n  }\r\n\r\n  render(){\r\n      return <Controls time={this.state.time} countDown={this.countDown}/>\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}