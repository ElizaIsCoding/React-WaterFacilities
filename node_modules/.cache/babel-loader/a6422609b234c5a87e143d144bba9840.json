{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2019 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResultStorage = exports.ClientInfo = exports.TestMatrix = exports.TestMatrixBuilder = exports._testMatrixWithOpts = exports.testMatrix = exports.TEST_MATRIX_COMPLETE_EVENT_TYPE = exports.SERVICE = exports.PROVIDER = void 0;\n\nvar _ = require(\"lodash\");\n\nvar cloud_functions_1 = require(\"../cloud-functions\");\n/** @internal */\n\n\nexports.PROVIDER = 'google.testing';\n/** @internal */\n\nexports.SERVICE = 'testing.googleapis.com';\n/** @internal */\n\nexports.TEST_MATRIX_COMPLETE_EVENT_TYPE = 'testMatrix.complete';\n/** Handle events related to Test Lab test matrices. */\n\nfunction testMatrix() {\n  return _testMatrixWithOpts({});\n}\n\nexports.testMatrix = testMatrix;\n/** @internal */\n\nfunction _testMatrixWithOpts(opts) {\n  return new TestMatrixBuilder(function () {\n    if (!process.env.GCLOUD_PROJECT) {\n      throw new Error('process.env.GCLOUD_PROJECT is not set.');\n    }\n\n    return 'projects/' + process.env.GCLOUD_PROJECT + '/testMatrices/{matrix}';\n  }, opts);\n}\n\nexports._testMatrixWithOpts = _testMatrixWithOpts;\n/** Builder used to create Cloud Functions for Test Lab test matrices events. */\n\nvar TestMatrixBuilder = /*#__PURE__*/function () {\n  /** @internal */\n  function TestMatrixBuilder(triggerResource, options) {\n    _classCallCheck(this, TestMatrixBuilder);\n\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n  /** Handle a TestMatrix that reached a final test state. */\n\n\n  _createClass(TestMatrixBuilder, [{\n    key: \"onComplete\",\n    value: function onComplete(handler) {\n      var dataConstructor = function dataConstructor(raw) {\n        return new TestMatrix(raw.data);\n      };\n\n      return cloud_functions_1.makeCloudFunction({\n        provider: exports.PROVIDER,\n        eventType: exports.TEST_MATRIX_COMPLETE_EVENT_TYPE,\n        triggerResource: this.triggerResource,\n        service: exports.SERVICE,\n        dataConstructor: dataConstructor,\n        handler: handler,\n        options: this.options\n      });\n    }\n  }]);\n\n  return TestMatrixBuilder;\n}();\n\nexports.TestMatrixBuilder = TestMatrixBuilder;\n/** TestMatrix captures details about a test run. */\n\nvar TestMatrix =\n/** @internal */\nfunction TestMatrix(data) {\n  _classCallCheck(this, TestMatrix);\n\n  this.testMatrixId = data.testMatrixId;\n  this.createTime = data.timestamp;\n  this.state = data.state;\n  this.outcomeSummary = data.outcomeSummary;\n  this.invalidMatrixDetails = data.invalidMatrixDetails;\n  this.resultStorage = new ResultStorage(data.resultStorage);\n  this.clientInfo = new ClientInfo(data.clientInfo);\n};\n\nexports.TestMatrix = TestMatrix;\n/** Information about the client which invoked the test. */\n\nvar ClientInfo =\n/** @internal */\nfunction ClientInfo(data) {\n  var _this = this;\n\n  _classCallCheck(this, ClientInfo);\n\n  this.name = _.get(data, 'name', '');\n  this.details = {};\n\n  _.forEach(_.get(data, 'clientInfoDetails'), function (detail) {\n    _this.details[detail.key] = detail.value || '';\n  });\n};\n\nexports.ClientInfo = ClientInfo;\n/** Locations where the test results are stored. */\n\nvar ResultStorage =\n/** @internal */\nfunction ResultStorage(data) {\n  _classCallCheck(this, ResultStorage);\n\n  this.gcsPath = _.get(data, 'googleCloudStorage.gcsPath');\n  this.toolResultsHistoryId = _.get(data, 'toolResultsHistory.historyId');\n  this.toolResultsExecutionId = _.get(data, 'toolResultsExecution.executionId');\n  this.resultsUrl = _.get(data, 'resultsUrl');\n};\n\nexports.ResultStorage = ResultStorage;","map":null,"metadata":{},"sourceType":"script"}