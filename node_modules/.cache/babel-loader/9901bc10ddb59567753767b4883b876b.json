{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.userRecordConstructor = exports.UserBuilder = exports.UserRecordMetadata = exports._userWithOptions = exports.user = exports.service = exports.provider = void 0;\n\nvar _ = require(\"lodash\");\n\nvar cloud_functions_1 = require(\"../cloud-functions\");\n/** @hidden */\n\n\nexports.provider = 'google.firebase.auth';\n/** @hidden */\n\nexports.service = 'firebaseauth.googleapis.com';\n/**\n * Handle events related to Firebase authentication users.\n */\n\nfunction user() {\n  return _userWithOptions({});\n}\n\nexports.user = user;\n/** @hidden */\n\nfunction _userWithOptions(options) {\n  return new UserBuilder(function () {\n    if (!process.env.GCLOUD_PROJECT) {\n      throw new Error('process.env.GCLOUD_PROJECT is not set.');\n    }\n\n    return 'projects/' + process.env.GCLOUD_PROJECT;\n  }, options);\n}\n\nexports._userWithOptions = _userWithOptions;\n\nvar UserRecordMetadata = /*#__PURE__*/function () {\n  function UserRecordMetadata(creationTime, lastSignInTime) {\n    _classCallCheck(this, UserRecordMetadata);\n\n    this.creationTime = creationTime;\n    this.lastSignInTime = lastSignInTime;\n  }\n  /** Returns a plain JavaScript object with the properties of UserRecordMetadata. */\n\n\n  _createClass(UserRecordMetadata, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        creationTime: this.creationTime,\n        lastSignInTime: this.lastSignInTime\n      };\n    }\n  }]);\n\n  return UserRecordMetadata;\n}();\n\nexports.UserRecordMetadata = UserRecordMetadata;\n/** Builder used to create Cloud Functions for Firebase Auth user lifecycle events. */\n\nvar UserBuilder = /*#__PURE__*/function () {\n  /** @hidden */\n  function UserBuilder(triggerResource, options) {\n    _classCallCheck(this, UserBuilder);\n\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n\n  _createClass(UserBuilder, [{\n    key: \"onCreate\",\n\n    /** Respond to the creation of a Firebase Auth user. */\n    value: function onCreate(handler) {\n      return this.onOperation(handler, 'user.create');\n    }\n    /** Respond to the deletion of a Firebase Auth user. */\n\n  }, {\n    key: \"onDelete\",\n    value: function onDelete(handler) {\n      return this.onOperation(handler, 'user.delete');\n    }\n  }, {\n    key: \"onOperation\",\n    value: function onOperation(handler, eventType) {\n      return cloud_functions_1.makeCloudFunction({\n        handler: handler,\n        provider: exports.provider,\n        eventType: eventType,\n        service: exports.service,\n        triggerResource: this.triggerResource,\n        dataConstructor: UserBuilder.dataConstructor,\n        legacyEventType: \"providers/firebase.auth/eventTypes/\".concat(eventType),\n        options: this.options\n      });\n    }\n  }], [{\n    key: \"dataConstructor\",\n    value: function dataConstructor(raw) {\n      return userRecordConstructor(raw.data);\n    }\n  }]);\n\n  return UserBuilder;\n}();\n\nexports.UserBuilder = UserBuilder;\n\nfunction userRecordConstructor(wireData) {\n  // Falsey values from the wire format proto get lost when converted to JSON, this adds them back.\n  var falseyValues = {\n    email: null,\n    emailVerified: false,\n    displayName: null,\n    photoURL: null,\n    phoneNumber: null,\n    disabled: false,\n    providerData: [],\n    customClaims: {},\n    passwordSalt: null,\n    passwordHash: null,\n    tokensValidAfterTime: null\n  };\n\n  var record = _.assign({}, falseyValues, wireData);\n\n  var meta = _.get(record, 'metadata');\n\n  if (meta) {\n    _.set(record, 'metadata', new UserRecordMetadata(meta.createdAt || meta.creationTime, meta.lastSignedInAt || meta.lastSignInTime));\n  } else {\n    _.set(record, 'metadata', new UserRecordMetadata(null, null));\n  }\n\n  _.forEach(record.providerData, function (entry) {\n    _.set(entry, 'toJSON', function () {\n      return entry;\n    });\n  });\n\n  _.set(record, 'toJSON', function () {\n    var json = _.pick(record, ['uid', 'email', 'emailVerified', 'displayName', 'photoURL', 'phoneNumber', 'disabled', 'passwordHash', 'passwordSalt', 'tokensValidAfterTime']);\n\n    json.metadata = _.get(record, 'metadata').toJSON();\n    json.customClaims = _.cloneDeep(record.customClaims);\n    json.providerData = _.map(record.providerData, function (entry) {\n      return entry.toJSON();\n    });\n    return json;\n  });\n\n  return record;\n}\n\nexports.userRecordConstructor = userRecordConstructor;","map":null,"metadata":{},"sourceType":"script"}