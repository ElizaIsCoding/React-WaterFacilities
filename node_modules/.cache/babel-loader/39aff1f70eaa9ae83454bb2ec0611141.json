{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.firebaseConfig = exports.config = void 0;\n\nvar path = require(\"path\");\n\nfunction config() {\n  if (typeof config.singleton === 'undefined') {\n    init();\n  }\n\n  return config.singleton;\n}\n\nexports.config = config;\n/**\n * Store and retrieve project configuration data such as third-party API\n * keys or other settings. You can set configuration values using the\n * Firebase CLI as described in\n * [Environment Configuration](/docs/functions/config-env).\n */\n\n(function (config) {})(config = exports.config || (exports.config = {}));\n/** @hidden */\n\n\nfunction firebaseConfig() {\n  var env = process.env.FIREBASE_CONFIG;\n\n  if (env) {\n    return JSON.parse(env);\n  } // Could have Runtime Config with Firebase in it as an ENV value.\n\n\n  try {\n    var _config = JSON.parse(process.env.CLOUD_RUNTIME_CONFIG);\n\n    if (_config.firebase) {\n      return _config.firebase;\n    }\n  } catch (e) {// Do nothing\n  } // Could have Runtime Config with Firebase in it as an ENV location or default.\n\n\n  try {\n    var configPath = process.env.CLOUD_RUNTIME_CONFIG || path.join(process.env.PWD, '.runtimeconfig.json');\n\n    var _config2 = require(configPath);\n\n    if (_config2.firebase) {\n      return _config2.firebase;\n    }\n  } catch (e) {// Do nothing\n  }\n\n  return null;\n}\n\nexports.firebaseConfig = firebaseConfig;\n\nfunction init() {\n  try {\n    var parsed = JSON.parse(process.env.CLOUD_RUNTIME_CONFIG);\n    delete parsed.firebase;\n    config.singleton = parsed;\n    return;\n  } catch (e) {// Do nothing\n  }\n\n  try {\n    var configPath = process.env.CLOUD_RUNTIME_CONFIG || path.join(process.env.PWD, '.runtimeconfig.json');\n\n    var _parsed = require(configPath);\n\n    delete _parsed.firebase;\n    config.singleton = _parsed;\n    return;\n  } catch (e) {// Do nothing\n  }\n\n  config.singleton = {};\n}","map":null,"metadata":{},"sourceType":"script"}