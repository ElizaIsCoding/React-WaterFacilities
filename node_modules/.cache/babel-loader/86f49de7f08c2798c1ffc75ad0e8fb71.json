{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2018 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UpdateBuilder = exports._onUpdateWithOptions = exports.onUpdate = exports.service = exports.provider = void 0;\n\nvar cloud_functions_1 = require(\"../cloud-functions\");\n/** @hidden */\n\n\nexports.provider = 'google.firebase.remoteconfig';\n/** @hidden */\n\nexports.service = 'firebaseremoteconfig.googleapis.com';\n/**\n * Registers a function that triggers on Firebase Remote Config template\n * update events.\n *\n * @param handler A function that takes the updated Remote Config\n *   template version metadata as an argument.\n *\n * @return A Cloud Function that you can export and deploy.\n */\n\nfunction onUpdate(handler) {\n  return _onUpdateWithOptions(handler, {});\n}\n\nexports.onUpdate = onUpdate;\n/** @hidden */\n\nfunction _onUpdateWithOptions(handler, options) {\n  var triggerResource = function triggerResource() {\n    if (!process.env.GCLOUD_PROJECT) {\n      throw new Error('process.env.GCLOUD_PROJECT is not set.');\n    }\n\n    return \"projects/\".concat(process.env.GCLOUD_PROJECT);\n  };\n\n  return new UpdateBuilder(triggerResource, options).onUpdate(handler);\n}\n\nexports._onUpdateWithOptions = _onUpdateWithOptions;\n/** Builder used to create Cloud Functions for Remote Config. */\n\nvar UpdateBuilder = /*#__PURE__*/function () {\n  /** @hidden */\n  function UpdateBuilder(triggerResource, options) {\n    _classCallCheck(this, UpdateBuilder);\n\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n  /**\n   * Handle all updates (including rollbacks) that affect a Remote Config\n   * project.\n   * @param handler A function that takes the updated Remote Config template\n   * version metadata as an argument.\n   */\n\n\n  _createClass(UpdateBuilder, [{\n    key: \"onUpdate\",\n    value: function onUpdate(handler) {\n      return cloud_functions_1.makeCloudFunction({\n        handler: handler,\n        provider: exports.provider,\n        service: exports.service,\n        triggerResource: this.triggerResource,\n        eventType: 'update',\n        options: this.options\n      });\n    }\n  }]);\n\n  return UpdateBuilder;\n}();\n\nexports.UpdateBuilder = UpdateBuilder;","map":null,"metadata":{},"sourceType":"script"}