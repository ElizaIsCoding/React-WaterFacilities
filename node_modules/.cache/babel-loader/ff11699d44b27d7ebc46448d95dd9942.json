{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar _objectSpread = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Message = exports.ScheduleBuilder = exports._scheduleWithOptions = exports.schedule = exports.TopicBuilder = exports._topicWithOptions = exports.topic = exports.service = exports.provider = void 0;\n\nvar cloud_functions_1 = require(\"../cloud-functions\");\n/** @hidden */\n\n\nexports.provider = 'google.pubsub';\n/** @hidden */\n\nexports.service = 'pubsub.googleapis.com';\n/**\n * Registers a Cloud Function triggered when a Google Cloud Pub/Sub message\n * is sent to a specified topic.\n *\n * @param topic The Pub/Sub topic to watch for message events.\n * @return Pub/Sub topic builder interface.\n */\n\nfunction topic(topic) {\n  return _topicWithOptions(topic, {});\n}\n\nexports.topic = topic;\n/** @hidden */\n\nfunction _topicWithOptions(topic, options) {\n  if (topic.indexOf('/') !== -1) {\n    throw new Error('Topic name may not have a /');\n  }\n\n  return new TopicBuilder(function () {\n    if (!process.env.GCLOUD_PROJECT) {\n      throw new Error('process.env.GCLOUD_PROJECT is not set.');\n    }\n\n    return \"projects/\".concat(process.env.GCLOUD_PROJECT, \"/topics/\").concat(topic);\n  }, options);\n}\n\nexports._topicWithOptions = _topicWithOptions;\n/**\n * The Google Cloud Pub/Sub topic builder.\n *\n * Access via [`functions.pubsub.topic()`](providers_pubsub_.html#topic).\n */\n\nvar TopicBuilder = /*#__PURE__*/function () {\n  /** @hidden */\n  function TopicBuilder(triggerResource, options) {\n    _classCallCheck(this, TopicBuilder);\n\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n  /**\n   * Event handler that fires every time a Cloud Pub/Sub message is\n   * published.\n   *\n   * @param handler Event handler that runs every time a Cloud Pub/Sub message\n   *   is published.\n   * @return A Cloud Function that you can export and deploy.\n   */\n\n\n  _createClass(TopicBuilder, [{\n    key: \"onPublish\",\n    value: function onPublish(handler) {\n      return cloud_functions_1.makeCloudFunction({\n        handler: handler,\n        provider: exports.provider,\n        service: exports.service,\n        triggerResource: this.triggerResource,\n        eventType: 'topic.publish',\n        dataConstructor: function dataConstructor(raw) {\n          return new Message(raw.data);\n        },\n        options: this.options\n      });\n    }\n  }]);\n\n  return TopicBuilder;\n}();\n\nexports.TopicBuilder = TopicBuilder;\n/**\n * Registers a Cloud Function to run at specified times.\n *\n * @param schedule The schedule, in Unix Crontab or AppEngine syntax.\n * @return ScheduleBuilder interface.\n */\n\nfunction schedule(schedule) {\n  return _scheduleWithOptions(schedule, {});\n}\n\nexports.schedule = schedule;\n/** @hidden */\n\nfunction _scheduleWithOptions(schedule, options) {\n  var triggerResource = function triggerResource() {\n    if (!process.env.GCLOUD_PROJECT) {\n      throw new Error('process.env.GCLOUD_PROJECT is not set.');\n    } // The CLI will append the correct topic name based on region and function name\n\n\n    return \"projects/\".concat(process.env.GCLOUD_PROJECT, \"/topics\");\n  };\n\n  return new ScheduleBuilder(triggerResource, _objectSpread({}, options, {\n    schedule: {\n      schedule: schedule\n    }\n  }));\n}\n\nexports._scheduleWithOptions = _scheduleWithOptions;\n/**\n * The builder for scheduled functions, which are powered by\n * Google Pub/Sub and Cloud Scheduler. Describes the Cloud Scheduler\n * job that is deployed to trigger a scheduled function at the provided\n * frequency. For more information, see\n * [Schedule functions](/docs/functions/schedule-functions).\n *\n * Access via [`functions.pubsub.schedule()`](providers_pubsub_.html#schedule).\n */\n\nvar ScheduleBuilder = /*#__PURE__*/function () {\n  /** @hidden */\n  function ScheduleBuilder(triggerResource, options) {\n    _classCallCheck(this, ScheduleBuilder);\n\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n\n  _createClass(ScheduleBuilder, [{\n    key: \"retryConfig\",\n    value: function retryConfig(config) {\n      this.options.schedule.retryConfig = config;\n      return this;\n    }\n  }, {\n    key: \"timeZone\",\n    value: function timeZone(_timeZone) {\n      this.options.schedule.timeZone = _timeZone;\n      return this;\n    }\n    /**\n     * Event handler for scheduled functions. Triggered whenever the associated\n     * scheduler job sends a Pub/Sub message.\n     *\n     * @param handler Handler that fires whenever the associated\n     *   scheduler job sends a Pub/Sub message.\n     * @return A Cloud Function that you can export and deploy.\n     */\n\n  }, {\n    key: \"onRun\",\n    value: function onRun(handler) {\n      var cloudFunction = cloud_functions_1.makeCloudFunction({\n        contextOnlyHandler: handler,\n        provider: exports.provider,\n        service: exports.service,\n        triggerResource: this.triggerResource,\n        eventType: 'topic.publish',\n        options: this.options,\n        labels: {\n          'deployment-scheduled': 'true'\n        }\n      });\n      return cloudFunction;\n    }\n  }]);\n\n  return ScheduleBuilder;\n}();\n\nexports.ScheduleBuilder = ScheduleBuilder;\n/**\n * Interface representing a Google Cloud Pub/Sub message.\n *\n * @param data Payload of a Pub/Sub message.\n */\n\nvar Message = /*#__PURE__*/function () {\n  function Message(data) {\n    _classCallCheck(this, Message);\n\n    var _ref = [data.data, data.attributes || {}, data.json];\n    this.data = _ref[0];\n    this.attributes = _ref[1];\n    this._json = _ref[2];\n  }\n  /**\n   * The JSON data payload of this message object, if any.\n   */\n\n\n  _createClass(Message, [{\n    key: \"toJSON\",\n\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @return A JSON-serializable representation of this object.\n     */\n    value: function toJSON() {\n      return {\n        data: this.data,\n        attributes: this.attributes\n      };\n    }\n  }, {\n    key: \"json\",\n    get: function get() {\n      if (typeof this._json === 'undefined') {\n        this._json = JSON.parse(new Buffer(this.data, 'base64').toString('utf8'));\n      }\n\n      return this._json;\n    }\n  }]);\n\n  return Message;\n}();\n\nexports.Message = Message;","map":null,"metadata":{},"sourceType":"script"}