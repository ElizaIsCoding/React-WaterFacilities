{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _defineProperty = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\Course 2020\\\\React-Water\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PageDescriptor = void 0;\n\nvar ended = require(\"is-stream-ended\");\n\nvar stream_1 = require(\"stream\");\n\nvar normalApiCaller_1 = require(\"../normalCalls/normalApiCaller\");\n\nvar pagedApiCaller_1 = require(\"./pagedApiCaller\");\n/**\n * A descriptor for methods that support pagination.\n */\n\n\nvar PageDescriptor = /*#__PURE__*/function () {\n  function PageDescriptor(requestPageTokenField, responsePageTokenField, resourceField) {\n    _classCallCheck(this, PageDescriptor);\n\n    this.requestPageTokenField = requestPageTokenField;\n    this.responsePageTokenField = responsePageTokenField;\n    this.resourceField = resourceField;\n  }\n  /**\n   * Creates a new object Stream which emits the resource on 'data' event.\n   */\n\n\n  _createClass(PageDescriptor, [{\n    key: \"createStream\",\n    value: function createStream(apiCall, request, options) {\n      var stream = new stream_1.PassThrough({\n        objectMode: true\n      });\n      options = Object.assign({}, options, {\n        autoPaginate: false\n      });\n      var maxResults = 'maxResults' in options ? options.maxResults : -1;\n      var pushCount = 0;\n      var started = false;\n\n      function callback(err, resources, next, apiResp) {\n        if (err) {\n          stream.emit('error', err);\n          return;\n        } // emit full api response with every page.\n\n\n        stream.emit('response', apiResp);\n\n        for (var i = 0; i < resources.length; ++i) {\n          if (ended(stream)) {\n            return;\n          }\n\n          if (resources[i] === null) {\n            continue;\n          }\n\n          stream.push(resources[i]);\n          pushCount++;\n\n          if (pushCount === maxResults) {\n            stream.end();\n          }\n        }\n\n        if (ended(stream)) {\n          return;\n        }\n\n        if (!next) {\n          stream.end();\n          return;\n        } // When pageToken is specified in the original options, it will overwrite\n        // the page token field in the next request. Therefore it must be cleared.\n\n\n        if ('pageToken' in options) {\n          delete options.pageToken;\n        }\n\n        if (stream.isPaused()) {\n          request = next;\n          started = false;\n        } else {\n          setImmediate(apiCall, next, options, callback);\n        }\n      }\n\n      stream.on('resume', function () {\n        if (!started) {\n          started = true;\n          apiCall(request, options, callback);\n        }\n      });\n      return stream;\n    }\n    /**\n     * Create an async iterable which can be recursively called for data on-demand.\n     */\n\n  }, {\n    key: \"asyncIterate\",\n    value: function asyncIterate(apiCall, request, options) {\n      options = Object.assign({}, options, {\n        autoPaginate: false\n      });\n      var iterable = this.createIterator(apiCall, request, options);\n      return iterable;\n    }\n  }, {\n    key: \"createIterator\",\n    value: function createIterator(apiCall, request, options) {\n      var asyncIterable = _defineProperty({}, Symbol.asyncIterator, function () {\n        var nextPageRequest = request;\n        var cache = [];\n        return {\n          next: function () {\n            var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              var result, _yield$apiCall, _yield$apiCall2;\n\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      if (!(cache.length > 0)) {\n                        _context.next = 2;\n                        break;\n                      }\n\n                      return _context.abrupt(\"return\", Promise.resolve({\n                        done: false,\n                        value: cache.shift()\n                      }));\n\n                    case 2:\n                      if (!nextPageRequest) {\n                        _context.next = 10;\n                        break;\n                      }\n\n                      _context.next = 5;\n                      return apiCall(nextPageRequest, options);\n\n                    case 5:\n                      _yield$apiCall = _context.sent;\n                      _yield$apiCall2 = _slicedToArray(_yield$apiCall, 2);\n                      result = _yield$apiCall2[0];\n                      nextPageRequest = _yield$apiCall2[1];\n                      cache.push.apply(cache, _toConsumableArray(result));\n\n                    case 10:\n                      if (!(cache.length === 0)) {\n                        _context.next = 12;\n                        break;\n                      }\n\n                      return _context.abrupt(\"return\", Promise.resolve({\n                        done: true,\n                        value: undefined\n                      }));\n\n                    case 12:\n                      return _context.abrupt(\"return\", Promise.resolve({\n                        done: false,\n                        value: cache.shift()\n                      }));\n\n                    case 13:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            function next() {\n              return _next.apply(this, arguments);\n            }\n\n            return next;\n          }()\n        };\n      });\n\n      return asyncIterable;\n    }\n  }, {\n    key: \"getApiCaller\",\n    value: function getApiCaller(settings) {\n      if (!settings.autoPaginate) {\n        return new normalApiCaller_1.NormalApiCaller();\n      }\n\n      return new pagedApiCaller_1.PagedApiCaller(this);\n    }\n  }]);\n\n  return PageDescriptor;\n}();\n\nexports.PageDescriptor = PageDescriptor;","map":null,"metadata":{},"sourceType":"script"}